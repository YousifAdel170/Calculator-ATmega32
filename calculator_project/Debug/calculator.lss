
calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000025be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000050  00800060  000025be  00002652  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  008000b0  008000b0  000026a2  2**0
                  ALLOC
  3 .stab         00001c5c  00000000  00000000  000026a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c23  00000000  00000000  00004300  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004f23  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005063  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000051d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007d07  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008ab4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008c14  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008ea1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000966f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee eb       	ldi	r30, 0xBE	; 190
      68:	f5 e2       	ldi	r31, 0x25	; 37
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3b       	cpi	r26, 0xB0	; 176
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 eb       	ldi	r26, 0xB0	; 176
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 3b       	cpi	r26, 0xB8	; 184
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 88 06 	call	0xd10	; 0xd10 <main>
      8a:	0c 94 dd 12 	jmp	0x25ba	; 0x25ba <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 61 12 	jmp	0x24c2	; 0x24c2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 ea       	ldi	r26, 0xA7	; 167
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 7d 12 	jmp	0x24fa	; 0x24fa <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 6d 12 	jmp	0x24da	; 0x24da <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 89 12 	jmp	0x2512	; 0x2512 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 6d 12 	jmp	0x24da	; 0x24da <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 89 12 	jmp	0x2512	; 0x2512 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 61 12 	jmp	0x24c2	; 0x24c2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 ea       	ldi	r24, 0xA7	; 167
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 7d 12 	jmp	0x24fa	; 0x24fa <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 6d 12 	jmp	0x24da	; 0x24da <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 89 12 	jmp	0x2512	; 0x2512 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 6d 12 	jmp	0x24da	; 0x24da <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 89 12 	jmp	0x2512	; 0x2512 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 6d 12 	jmp	0x24da	; 0x24da <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 89 12 	jmp	0x2512	; 0x2512 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 71 12 	jmp	0x24e2	; 0x24e2 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 8d 12 	jmp	0x251a	; 0x251a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <calculator>:
#define CLEAR_BUTTON			13

uint64 result = ZERO;

void calculator(uint8 num1, uint8 num2, uint8 operator)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <calculator+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <calculator+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	/* move to next line to display the result */
	LCD_moveCursor(1,0);
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	60 e0       	ldi	r22, 0x00	; 0
     b5e:	0e 94 ae 11 	call	0x235c	; 0x235c <LCD_moveCursor>

	switch(operator)
     b62:	8b 81       	ldd	r24, Y+3	; 0x03
     b64:	28 2f       	mov	r18, r24
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	3d 83       	std	Y+5, r19	; 0x05
     b6a:	2c 83       	std	Y+4, r18	; 0x04
     b6c:	8c 81       	ldd	r24, Y+4	; 0x04
     b6e:	9d 81       	ldd	r25, Y+5	; 0x05
     b70:	8a 32       	cpi	r24, 0x2A	; 42
     b72:	91 05       	cpc	r25, r1
     b74:	09 f4       	brne	.+2      	; 0xb78 <calculator+0x32>
     b76:	69 c0       	rjmp	.+210    	; 0xc4a <calculator+0x104>
     b78:	2c 81       	ldd	r18, Y+4	; 0x04
     b7a:	3d 81       	ldd	r19, Y+5	; 0x05
     b7c:	2b 32       	cpi	r18, 0x2B	; 43
     b7e:	31 05       	cpc	r19, r1
     b80:	3c f4       	brge	.+14     	; 0xb90 <calculator+0x4a>
     b82:	8c 81       	ldd	r24, Y+4	; 0x04
     b84:	9d 81       	ldd	r25, Y+5	; 0x05
     b86:	85 32       	cpi	r24, 0x25	; 37
     b88:	91 05       	cpc	r25, r1
     b8a:	09 f4       	brne	.+2      	; 0xb8e <calculator+0x48>
     b8c:	8b c0       	rjmp	.+278    	; 0xca4 <calculator+0x15e>
     b8e:	b4 c0       	rjmp	.+360    	; 0xcf8 <calculator+0x1b2>
     b90:	2c 81       	ldd	r18, Y+4	; 0x04
     b92:	3d 81       	ldd	r19, Y+5	; 0x05
     b94:	2b 32       	cpi	r18, 0x2B	; 43
     b96:	31 05       	cpc	r19, r1
     b98:	31 f0       	breq	.+12     	; 0xba6 <calculator+0x60>
     b9a:	8c 81       	ldd	r24, Y+4	; 0x04
     b9c:	9d 81       	ldd	r25, Y+5	; 0x05
     b9e:	8d 32       	cpi	r24, 0x2D	; 45
     ba0:	91 05       	cpc	r25, r1
     ba2:	51 f1       	breq	.+84     	; 0xbf8 <calculator+0xb2>
     ba4:	a9 c0       	rjmp	.+338    	; 0xcf8 <calculator+0x1b2>
	{
	case ADDITION_OPERATOR:
		result  = num1 + num2;
     ba6:	89 81       	ldd	r24, Y+1	; 0x01
     ba8:	28 2f       	mov	r18, r24
     baa:	30 e0       	ldi	r19, 0x00	; 0
     bac:	8a 81       	ldd	r24, Y+2	; 0x02
     bae:	88 2f       	mov	r24, r24
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	d9 01       	movw	r26, r18
     bb4:	a8 0f       	add	r26, r24
     bb6:	b9 1f       	adc	r27, r25
     bb8:	fd 01       	movw	r30, r26
     bba:	ff 0f       	add	r31, r31
     bbc:	ee 0b       	sbc	r30, r30
     bbe:	fe 2f       	mov	r31, r30
     bc0:	9d 01       	movw	r18, r26
     bc2:	4e 2f       	mov	r20, r30
     bc4:	5e 2f       	mov	r21, r30
     bc6:	6e 2f       	mov	r22, r30
     bc8:	7e 2f       	mov	r23, r30
     bca:	8e 2f       	mov	r24, r30
     bcc:	9e 2f       	mov	r25, r30
     bce:	20 93 b0 00 	sts	0x00B0, r18
     bd2:	30 93 b1 00 	sts	0x00B1, r19
     bd6:	40 93 b2 00 	sts	0x00B2, r20
     bda:	50 93 b3 00 	sts	0x00B3, r21
     bde:	60 93 b4 00 	sts	0x00B4, r22
     be2:	70 93 b5 00 	sts	0x00B5, r23
     be6:	80 93 b6 00 	sts	0x00B6, r24
     bea:	90 93 b7 00 	sts	0x00B7, r25
		LCD_displayString("Result = ");
     bee:	80 e6       	ldi	r24, 0x60	; 96
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	0e 94 85 11 	call	0x230a	; 0x230a <LCD_displayString>
     bf6:	84 c0       	rjmp	.+264    	; 0xd00 <calculator+0x1ba>
		break;
	case SUBTRACTION_OPERATOR:
		result  = num1 - num2;
     bf8:	89 81       	ldd	r24, Y+1	; 0x01
     bfa:	28 2f       	mov	r18, r24
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	8a 81       	ldd	r24, Y+2	; 0x02
     c00:	88 2f       	mov	r24, r24
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	d9 01       	movw	r26, r18
     c06:	a8 1b       	sub	r26, r24
     c08:	b9 0b       	sbc	r27, r25
     c0a:	fd 01       	movw	r30, r26
     c0c:	ff 0f       	add	r31, r31
     c0e:	ee 0b       	sbc	r30, r30
     c10:	fe 2f       	mov	r31, r30
     c12:	9d 01       	movw	r18, r26
     c14:	4e 2f       	mov	r20, r30
     c16:	5e 2f       	mov	r21, r30
     c18:	6e 2f       	mov	r22, r30
     c1a:	7e 2f       	mov	r23, r30
     c1c:	8e 2f       	mov	r24, r30
     c1e:	9e 2f       	mov	r25, r30
     c20:	20 93 b0 00 	sts	0x00B0, r18
     c24:	30 93 b1 00 	sts	0x00B1, r19
     c28:	40 93 b2 00 	sts	0x00B2, r20
     c2c:	50 93 b3 00 	sts	0x00B3, r21
     c30:	60 93 b4 00 	sts	0x00B4, r22
     c34:	70 93 b5 00 	sts	0x00B5, r23
     c38:	80 93 b6 00 	sts	0x00B6, r24
     c3c:	90 93 b7 00 	sts	0x00B7, r25
		LCD_displayString("Result = ");
     c40:	80 e6       	ldi	r24, 0x60	; 96
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	0e 94 85 11 	call	0x230a	; 0x230a <LCD_displayString>
     c48:	5b c0       	rjmp	.+182    	; 0xd00 <calculator+0x1ba>
		break;
	case MULTIPLY_OPERATOR:
		result  = num1 * num2;
     c4a:	89 81       	ldd	r24, Y+1	; 0x01
     c4c:	28 2f       	mov	r18, r24
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	8a 81       	ldd	r24, Y+2	; 0x02
     c52:	88 2f       	mov	r24, r24
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	28 9f       	mul	r18, r24
     c58:	d0 01       	movw	r26, r0
     c5a:	29 9f       	mul	r18, r25
     c5c:	b0 0d       	add	r27, r0
     c5e:	38 9f       	mul	r19, r24
     c60:	b0 0d       	add	r27, r0
     c62:	11 24       	eor	r1, r1
     c64:	fd 01       	movw	r30, r26
     c66:	ff 0f       	add	r31, r31
     c68:	ee 0b       	sbc	r30, r30
     c6a:	fe 2f       	mov	r31, r30
     c6c:	9d 01       	movw	r18, r26
     c6e:	4e 2f       	mov	r20, r30
     c70:	5e 2f       	mov	r21, r30
     c72:	6e 2f       	mov	r22, r30
     c74:	7e 2f       	mov	r23, r30
     c76:	8e 2f       	mov	r24, r30
     c78:	9e 2f       	mov	r25, r30
     c7a:	20 93 b0 00 	sts	0x00B0, r18
     c7e:	30 93 b1 00 	sts	0x00B1, r19
     c82:	40 93 b2 00 	sts	0x00B2, r20
     c86:	50 93 b3 00 	sts	0x00B3, r21
     c8a:	60 93 b4 00 	sts	0x00B4, r22
     c8e:	70 93 b5 00 	sts	0x00B5, r23
     c92:	80 93 b6 00 	sts	0x00B6, r24
     c96:	90 93 b7 00 	sts	0x00B7, r25
		LCD_displayString("Result = ");
     c9a:	80 e6       	ldi	r24, 0x60	; 96
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	0e 94 85 11 	call	0x230a	; 0x230a <LCD_displayString>
     ca2:	2e c0       	rjmp	.+92     	; 0xd00 <calculator+0x1ba>
		break;
	case DIVISION_OPERATOR:
		if(num2 != 0)
     ca4:	8a 81       	ldd	r24, Y+2	; 0x02
     ca6:	88 23       	and	r24, r24
     ca8:	11 f1       	breq	.+68     	; 0xcee <calculator+0x1a8>
		{
			result  = num1 / num2;
     caa:	89 81       	ldd	r24, Y+1	; 0x01
     cac:	9a 81       	ldd	r25, Y+2	; 0x02
     cae:	69 2f       	mov	r22, r25
     cb0:	0e 94 55 12 	call	0x24aa	; 0x24aa <__udivmodqi4>
     cb4:	28 2f       	mov	r18, r24
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	40 e0       	ldi	r20, 0x00	; 0
     cba:	50 e0       	ldi	r21, 0x00	; 0
     cbc:	60 e0       	ldi	r22, 0x00	; 0
     cbe:	70 e0       	ldi	r23, 0x00	; 0
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	20 93 b0 00 	sts	0x00B0, r18
     cc8:	30 93 b1 00 	sts	0x00B1, r19
     ccc:	40 93 b2 00 	sts	0x00B2, r20
     cd0:	50 93 b3 00 	sts	0x00B3, r21
     cd4:	60 93 b4 00 	sts	0x00B4, r22
     cd8:	70 93 b5 00 	sts	0x00B5, r23
     cdc:	80 93 b6 00 	sts	0x00B6, r24
     ce0:	90 93 b7 00 	sts	0x00B7, r25
			LCD_displayString("Result = ");
     ce4:	80 e6       	ldi	r24, 0x60	; 96
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	0e 94 85 11 	call	0x230a	; 0x230a <LCD_displayString>
     cec:	09 c0       	rjmp	.+18     	; 0xd00 <calculator+0x1ba>
		}
		else
			LCD_displayString("Error!!!!!!!!!!!");
     cee:	8a e6       	ldi	r24, 0x6A	; 106
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	0e 94 85 11 	call	0x230a	; 0x230a <LCD_displayString>
     cf6:	04 c0       	rjmp	.+8      	; 0xd00 <calculator+0x1ba>
		break;
	default:
		LCD_displayString("Wrong Operator!!!");
     cf8:	8b e7       	ldi	r24, 0x7B	; 123
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	0e 94 85 11 	call	0x230a	; 0x230a <LCD_displayString>
		break;
	}
}
     d00:	0f 90       	pop	r0
     d02:	0f 90       	pop	r0
     d04:	0f 90       	pop	r0
     d06:	0f 90       	pop	r0
     d08:	0f 90       	pop	r0
     d0a:	cf 91       	pop	r28
     d0c:	df 91       	pop	r29
     d0e:	08 95       	ret

00000d10 <main>:


int main(void)
{
     d10:	df 93       	push	r29
     d12:	cf 93       	push	r28
     d14:	cd b7       	in	r28, 0x3d	; 61
     d16:	de b7       	in	r29, 0x3e	; 62
     d18:	ac 97       	sbiw	r28, 0x2c	; 44
     d1a:	0f b6       	in	r0, 0x3f	; 63
     d1c:	f8 94       	cli
     d1e:	de bf       	out	0x3e, r29	; 62
     d20:	0f be       	out	0x3f, r0	; 63
     d22:	cd bf       	out	0x3d, r28	; 61
	/* Initialize The LCD driver */
	LCD_init();
     d24:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <LCD_init>

	LCD_displayString("Enter The ");
     d28:	8d e8       	ldi	r24, 0x8D	; 141
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	0e 94 85 11 	call	0x230a	; 0x230a <LCD_displayString>
	LCD_displayStringRowColumn(1,0, "Operation");
     d30:	28 e9       	ldi	r18, 0x98	; 152
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	60 e0       	ldi	r22, 0x00	; 0
     d38:	a9 01       	movw	r20, r18
     d3a:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <LCD_displayStringRowColumn>
     d3e:	80 e0       	ldi	r24, 0x00	; 0
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	aa ef       	ldi	r26, 0xFA	; 250
     d44:	b3 e4       	ldi	r27, 0x43	; 67
     d46:	89 8f       	std	Y+25, r24	; 0x19
     d48:	9a 8f       	std	Y+26, r25	; 0x1a
     d4a:	ab 8f       	std	Y+27, r26	; 0x1b
     d4c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d4e:	69 8d       	ldd	r22, Y+25	; 0x19
     d50:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d52:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d54:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d56:	20 e0       	ldi	r18, 0x00	; 0
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	4a e7       	ldi	r20, 0x7A	; 122
     d5c:	53 e4       	ldi	r21, 0x43	; 67
     d5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d62:	dc 01       	movw	r26, r24
     d64:	cb 01       	movw	r24, r22
     d66:	8d 8b       	std	Y+21, r24	; 0x15
     d68:	9e 8b       	std	Y+22, r25	; 0x16
     d6a:	af 8b       	std	Y+23, r26	; 0x17
     d6c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     d6e:	6d 89       	ldd	r22, Y+21	; 0x15
     d70:	7e 89       	ldd	r23, Y+22	; 0x16
     d72:	8f 89       	ldd	r24, Y+23	; 0x17
     d74:	98 8d       	ldd	r25, Y+24	; 0x18
     d76:	20 e0       	ldi	r18, 0x00	; 0
     d78:	30 e0       	ldi	r19, 0x00	; 0
     d7a:	40 e8       	ldi	r20, 0x80	; 128
     d7c:	5f e3       	ldi	r21, 0x3F	; 63
     d7e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d82:	88 23       	and	r24, r24
     d84:	2c f4       	brge	.+10     	; 0xd90 <main+0x80>
		__ticks = 1;
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	9c 8b       	std	Y+20, r25	; 0x14
     d8c:	8b 8b       	std	Y+19, r24	; 0x13
     d8e:	3f c0       	rjmp	.+126    	; 0xe0e <main+0xfe>
	else if (__tmp > 65535)
     d90:	6d 89       	ldd	r22, Y+21	; 0x15
     d92:	7e 89       	ldd	r23, Y+22	; 0x16
     d94:	8f 89       	ldd	r24, Y+23	; 0x17
     d96:	98 8d       	ldd	r25, Y+24	; 0x18
     d98:	20 e0       	ldi	r18, 0x00	; 0
     d9a:	3f ef       	ldi	r19, 0xFF	; 255
     d9c:	4f e7       	ldi	r20, 0x7F	; 127
     d9e:	57 e4       	ldi	r21, 0x47	; 71
     da0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     da4:	18 16       	cp	r1, r24
     da6:	4c f5       	brge	.+82     	; 0xdfa <main+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     da8:	69 8d       	ldd	r22, Y+25	; 0x19
     daa:	7a 8d       	ldd	r23, Y+26	; 0x1a
     dac:	8b 8d       	ldd	r24, Y+27	; 0x1b
     dae:	9c 8d       	ldd	r25, Y+28	; 0x1c
     db0:	20 e0       	ldi	r18, 0x00	; 0
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	40 e2       	ldi	r20, 0x20	; 32
     db6:	51 e4       	ldi	r21, 0x41	; 65
     db8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dbc:	dc 01       	movw	r26, r24
     dbe:	cb 01       	movw	r24, r22
     dc0:	bc 01       	movw	r22, r24
     dc2:	cd 01       	movw	r24, r26
     dc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dc8:	dc 01       	movw	r26, r24
     dca:	cb 01       	movw	r24, r22
     dcc:	9c 8b       	std	Y+20, r25	; 0x14
     dce:	8b 8b       	std	Y+19, r24	; 0x13
     dd0:	0f c0       	rjmp	.+30     	; 0xdf0 <main+0xe0>
     dd2:	89 e1       	ldi	r24, 0x19	; 25
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	9a 8b       	std	Y+18, r25	; 0x12
     dd8:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     dda:	89 89       	ldd	r24, Y+17	; 0x11
     ddc:	9a 89       	ldd	r25, Y+18	; 0x12
     dde:	01 97       	sbiw	r24, 0x01	; 1
     de0:	f1 f7       	brne	.-4      	; 0xdde <main+0xce>
     de2:	9a 8b       	std	Y+18, r25	; 0x12
     de4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     de6:	8b 89       	ldd	r24, Y+19	; 0x13
     de8:	9c 89       	ldd	r25, Y+20	; 0x14
     dea:	01 97       	sbiw	r24, 0x01	; 1
     dec:	9c 8b       	std	Y+20, r25	; 0x14
     dee:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     df0:	8b 89       	ldd	r24, Y+19	; 0x13
     df2:	9c 89       	ldd	r25, Y+20	; 0x14
     df4:	00 97       	sbiw	r24, 0x00	; 0
     df6:	69 f7       	brne	.-38     	; 0xdd2 <main+0xc2>
     df8:	14 c0       	rjmp	.+40     	; 0xe22 <main+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dfa:	6d 89       	ldd	r22, Y+21	; 0x15
     dfc:	7e 89       	ldd	r23, Y+22	; 0x16
     dfe:	8f 89       	ldd	r24, Y+23	; 0x17
     e00:	98 8d       	ldd	r25, Y+24	; 0x18
     e02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e06:	dc 01       	movw	r26, r24
     e08:	cb 01       	movw	r24, r22
     e0a:	9c 8b       	std	Y+20, r25	; 0x14
     e0c:	8b 8b       	std	Y+19, r24	; 0x13
     e0e:	8b 89       	ldd	r24, Y+19	; 0x13
     e10:	9c 89       	ldd	r25, Y+20	; 0x14
     e12:	98 8b       	std	Y+16, r25	; 0x10
     e14:	8f 87       	std	Y+15, r24	; 0x0f
     e16:	8f 85       	ldd	r24, Y+15	; 0x0f
     e18:	98 89       	ldd	r25, Y+16	; 0x10
     e1a:	01 97       	sbiw	r24, 0x01	; 1
     e1c:	f1 f7       	brne	.-4      	; 0xe1a <main+0x10a>
     e1e:	98 8b       	std	Y+16, r25	; 0x10
     e20:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500);
	LCD_clearScreen();
     e22:	0e 94 2c 12 	call	0x2458	; 0x2458 <LCD_clearScreen>

	/* Initialize the variables to zero */
	uint32 num1 = ZERO, num2 = ZERO, operator = ZERO, key;
     e26:	19 a6       	std	Y+41, r1	; 0x29
     e28:	1a a6       	std	Y+42, r1	; 0x2a
     e2a:	1b a6       	std	Y+43, r1	; 0x2b
     e2c:	1c a6       	std	Y+44, r1	; 0x2c
     e2e:	1d a2       	std	Y+37, r1	; 0x25
     e30:	1e a2       	std	Y+38, r1	; 0x26
     e32:	1f a2       	std	Y+39, r1	; 0x27
     e34:	18 a6       	std	Y+40, r1	; 0x28
     e36:	19 a2       	std	Y+33, r1	; 0x21
     e38:	1a a2       	std	Y+34, r1	; 0x22
     e3a:	1b a2       	std	Y+35, r1	; 0x23
     e3c:	1c a2       	std	Y+36, r1	; 0x24
	LCD_displayString("Op: ");
     e3e:	82 ea       	ldi	r24, 0xA2	; 162
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	0e 94 85 11 	call	0x230a	; 0x230a <LCD_displayString>
	while(1)
	{

		/* gets the input from the keypad */
		key = KEYPAD_getPressedKey();
     e46:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <KEYPAD_getPressedKey>
     e4a:	88 2f       	mov	r24, r24
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	a0 e0       	ldi	r26, 0x00	; 0
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	8d 8f       	std	Y+29, r24	; 0x1d
     e54:	9e 8f       	std	Y+30, r25	; 0x1e
     e56:	af 8f       	std	Y+31, r26	; 0x1f
     e58:	b8 a3       	std	Y+32, r27	; 0x20
     e5a:	80 e0       	ldi	r24, 0x00	; 0
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	aa ef       	ldi	r26, 0xFA	; 250
     e60:	b3 e4       	ldi	r27, 0x43	; 67
     e62:	8b 87       	std	Y+11, r24	; 0x0b
     e64:	9c 87       	std	Y+12, r25	; 0x0c
     e66:	ad 87       	std	Y+13, r26	; 0x0d
     e68:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e6a:	6b 85       	ldd	r22, Y+11	; 0x0b
     e6c:	7c 85       	ldd	r23, Y+12	; 0x0c
     e6e:	8d 85       	ldd	r24, Y+13	; 0x0d
     e70:	9e 85       	ldd	r25, Y+14	; 0x0e
     e72:	20 e0       	ldi	r18, 0x00	; 0
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	4a e7       	ldi	r20, 0x7A	; 122
     e78:	53 e4       	ldi	r21, 0x43	; 67
     e7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e7e:	dc 01       	movw	r26, r24
     e80:	cb 01       	movw	r24, r22
     e82:	8f 83       	std	Y+7, r24	; 0x07
     e84:	98 87       	std	Y+8, r25	; 0x08
     e86:	a9 87       	std	Y+9, r26	; 0x09
     e88:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e8a:	6f 81       	ldd	r22, Y+7	; 0x07
     e8c:	78 85       	ldd	r23, Y+8	; 0x08
     e8e:	89 85       	ldd	r24, Y+9	; 0x09
     e90:	9a 85       	ldd	r25, Y+10	; 0x0a
     e92:	20 e0       	ldi	r18, 0x00	; 0
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	40 e8       	ldi	r20, 0x80	; 128
     e98:	5f e3       	ldi	r21, 0x3F	; 63
     e9a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e9e:	88 23       	and	r24, r24
     ea0:	2c f4       	brge	.+10     	; 0xeac <main+0x19c>
		__ticks = 1;
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	9e 83       	std	Y+6, r25	; 0x06
     ea8:	8d 83       	std	Y+5, r24	; 0x05
     eaa:	3f c0       	rjmp	.+126    	; 0xf2a <main+0x21a>
	else if (__tmp > 65535)
     eac:	6f 81       	ldd	r22, Y+7	; 0x07
     eae:	78 85       	ldd	r23, Y+8	; 0x08
     eb0:	89 85       	ldd	r24, Y+9	; 0x09
     eb2:	9a 85       	ldd	r25, Y+10	; 0x0a
     eb4:	20 e0       	ldi	r18, 0x00	; 0
     eb6:	3f ef       	ldi	r19, 0xFF	; 255
     eb8:	4f e7       	ldi	r20, 0x7F	; 127
     eba:	57 e4       	ldi	r21, 0x47	; 71
     ebc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ec0:	18 16       	cp	r1, r24
     ec2:	4c f5       	brge	.+82     	; 0xf16 <main+0x206>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ec4:	6b 85       	ldd	r22, Y+11	; 0x0b
     ec6:	7c 85       	ldd	r23, Y+12	; 0x0c
     ec8:	8d 85       	ldd	r24, Y+13	; 0x0d
     eca:	9e 85       	ldd	r25, Y+14	; 0x0e
     ecc:	20 e0       	ldi	r18, 0x00	; 0
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	40 e2       	ldi	r20, 0x20	; 32
     ed2:	51 e4       	ldi	r21, 0x41	; 65
     ed4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ed8:	dc 01       	movw	r26, r24
     eda:	cb 01       	movw	r24, r22
     edc:	bc 01       	movw	r22, r24
     ede:	cd 01       	movw	r24, r26
     ee0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ee4:	dc 01       	movw	r26, r24
     ee6:	cb 01       	movw	r24, r22
     ee8:	9e 83       	std	Y+6, r25	; 0x06
     eea:	8d 83       	std	Y+5, r24	; 0x05
     eec:	0f c0       	rjmp	.+30     	; 0xf0c <main+0x1fc>
     eee:	89 e1       	ldi	r24, 0x19	; 25
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	9c 83       	std	Y+4, r25	; 0x04
     ef4:	8b 83       	std	Y+3, r24	; 0x03
     ef6:	8b 81       	ldd	r24, Y+3	; 0x03
     ef8:	9c 81       	ldd	r25, Y+4	; 0x04
     efa:	01 97       	sbiw	r24, 0x01	; 1
     efc:	f1 f7       	brne	.-4      	; 0xefa <main+0x1ea>
     efe:	9c 83       	std	Y+4, r25	; 0x04
     f00:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f02:	8d 81       	ldd	r24, Y+5	; 0x05
     f04:	9e 81       	ldd	r25, Y+6	; 0x06
     f06:	01 97       	sbiw	r24, 0x01	; 1
     f08:	9e 83       	std	Y+6, r25	; 0x06
     f0a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f0c:	8d 81       	ldd	r24, Y+5	; 0x05
     f0e:	9e 81       	ldd	r25, Y+6	; 0x06
     f10:	00 97       	sbiw	r24, 0x00	; 0
     f12:	69 f7       	brne	.-38     	; 0xeee <main+0x1de>
     f14:	14 c0       	rjmp	.+40     	; 0xf3e <main+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f16:	6f 81       	ldd	r22, Y+7	; 0x07
     f18:	78 85       	ldd	r23, Y+8	; 0x08
     f1a:	89 85       	ldd	r24, Y+9	; 0x09
     f1c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f22:	dc 01       	movw	r26, r24
     f24:	cb 01       	movw	r24, r22
     f26:	9e 83       	std	Y+6, r25	; 0x06
     f28:	8d 83       	std	Y+5, r24	; 0x05
     f2a:	8d 81       	ldd	r24, Y+5	; 0x05
     f2c:	9e 81       	ldd	r25, Y+6	; 0x06
     f2e:	9a 83       	std	Y+2, r25	; 0x02
     f30:	89 83       	std	Y+1, r24	; 0x01
     f32:	89 81       	ldd	r24, Y+1	; 0x01
     f34:	9a 81       	ldd	r25, Y+2	; 0x02
     f36:	01 97       	sbiw	r24, 0x01	; 1
     f38:	f1 f7       	brne	.-4      	; 0xf36 <main+0x226>
     f3a:	9a 83       	std	Y+2, r25	; 0x02
     f3c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);	/* Press Time */

		/* check if the user entered number */
		if((key >= 0) && (key <= 9))
     f3e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f40:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f42:	af 8d       	ldd	r26, Y+31	; 0x1f
     f44:	b8 a1       	ldd	r27, Y+32	; 0x20
     f46:	8a 30       	cpi	r24, 0x0A	; 10
     f48:	91 05       	cpc	r25, r1
     f4a:	a1 05       	cpc	r26, r1
     f4c:	b1 05       	cpc	r27, r1
     f4e:	f8 f4       	brcc	.+62     	; 0xf8e <main+0x27e>
		{
			/* Print The first number */
			LCD_intgerToString(key);
     f50:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f52:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f54:	0e 94 09 12 	call	0x2412	; 0x2412 <LCD_intgerToString>

			/*Stored it in num2 because we will store num2 in num1 then add the next element in it */
			/* also here we multiply to 10 then add the number because if the number contains multiple digits */
			num2 = (num2 * 10) + key;
     f58:	8d a1       	ldd	r24, Y+37	; 0x25
     f5a:	9e a1       	ldd	r25, Y+38	; 0x26
     f5c:	af a1       	ldd	r26, Y+39	; 0x27
     f5e:	b8 a5       	ldd	r27, Y+40	; 0x28
     f60:	2a e0       	ldi	r18, 0x0A	; 10
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	40 e0       	ldi	r20, 0x00	; 0
     f66:	50 e0       	ldi	r21, 0x00	; 0
     f68:	bc 01       	movw	r22, r24
     f6a:	cd 01       	movw	r24, r26
     f6c:	0e 94 36 12 	call	0x246c	; 0x246c <__mulsi3>
     f70:	9b 01       	movw	r18, r22
     f72:	ac 01       	movw	r20, r24
     f74:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f76:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f78:	af 8d       	ldd	r26, Y+31	; 0x1f
     f7a:	b8 a1       	ldd	r27, Y+32	; 0x20
     f7c:	82 0f       	add	r24, r18
     f7e:	93 1f       	adc	r25, r19
     f80:	a4 1f       	adc	r26, r20
     f82:	b5 1f       	adc	r27, r21
     f84:	8d a3       	std	Y+37, r24	; 0x25
     f86:	9e a3       	std	Y+38, r25	; 0x26
     f88:	af a3       	std	Y+39, r26	; 0x27
     f8a:	b8 a7       	std	Y+40, r27	; 0x28
     f8c:	5c cf       	rjmp	.-328    	; 0xe46 <main+0x136>
		}

		/*check if the user entered operator*/
		else if ((key == ADDITION_OPERATOR) ||
     f8e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f90:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f92:	af 8d       	ldd	r26, Y+31	; 0x1f
     f94:	b8 a1       	ldd	r27, Y+32	; 0x20
     f96:	8b 32       	cpi	r24, 0x2B	; 43
     f98:	91 05       	cpc	r25, r1
     f9a:	a1 05       	cpc	r26, r1
     f9c:	b1 05       	cpc	r27, r1
     f9e:	d9 f0       	breq	.+54     	; 0xfd6 <main+0x2c6>
     fa0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fa2:	9e 8d       	ldd	r25, Y+30	; 0x1e
     fa4:	af 8d       	ldd	r26, Y+31	; 0x1f
     fa6:	b8 a1       	ldd	r27, Y+32	; 0x20
     fa8:	8d 32       	cpi	r24, 0x2D	; 45
     faa:	91 05       	cpc	r25, r1
     fac:	a1 05       	cpc	r26, r1
     fae:	b1 05       	cpc	r27, r1
     fb0:	91 f0       	breq	.+36     	; 0xfd6 <main+0x2c6>
     fb2:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fb4:	9e 8d       	ldd	r25, Y+30	; 0x1e
     fb6:	af 8d       	ldd	r26, Y+31	; 0x1f
     fb8:	b8 a1       	ldd	r27, Y+32	; 0x20
     fba:	8a 32       	cpi	r24, 0x2A	; 42
     fbc:	91 05       	cpc	r25, r1
     fbe:	a1 05       	cpc	r26, r1
     fc0:	b1 05       	cpc	r27, r1
     fc2:	49 f0       	breq	.+18     	; 0xfd6 <main+0x2c6>
     fc4:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fc6:	9e 8d       	ldd	r25, Y+30	; 0x1e
     fc8:	af 8d       	ldd	r26, Y+31	; 0x1f
     fca:	b8 a1       	ldd	r27, Y+32	; 0x20
     fcc:	85 32       	cpi	r24, 0x25	; 37
     fce:	91 05       	cpc	r25, r1
     fd0:	a1 05       	cpc	r26, r1
     fd2:	b1 05       	cpc	r27, r1
     fd4:	c1 f4       	brne	.+48     	; 0x1006 <main+0x2f6>
				(key == SUBTRACTION_OPERATOR) ||
				(key == MULTIPLY_OPERATOR) ||
				(key == DIVISION_OPERATOR))
		{
			/* Display The operator */
			LCD_displayCharacter(key);
     fd6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fd8:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <LCD_displayCharacter>

			/* Save the operator */
			operator = key;
     fdc:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fde:	9e 8d       	ldd	r25, Y+30	; 0x1e
     fe0:	af 8d       	ldd	r26, Y+31	; 0x1f
     fe2:	b8 a1       	ldd	r27, Y+32	; 0x20
     fe4:	89 a3       	std	Y+33, r24	; 0x21
     fe6:	9a a3       	std	Y+34, r25	; 0x22
     fe8:	ab a3       	std	Y+35, r26	; 0x23
     fea:	bc a3       	std	Y+36, r27	; 0x24
			num1 = num2;		/* Save first number entered into num1 variable */
     fec:	8d a1       	ldd	r24, Y+37	; 0x25
     fee:	9e a1       	ldd	r25, Y+38	; 0x26
     ff0:	af a1       	ldd	r26, Y+39	; 0x27
     ff2:	b8 a5       	ldd	r27, Y+40	; 0x28
     ff4:	89 a7       	std	Y+41, r24	; 0x29
     ff6:	9a a7       	std	Y+42, r25	; 0x2a
     ff8:	ab a7       	std	Y+43, r26	; 0x2b
     ffa:	bc a7       	std	Y+44, r27	; 0x2c
			num2 = 0;			/* reset the number to store the second number */
     ffc:	1d a2       	std	Y+37, r1	; 0x25
     ffe:	1e a2       	std	Y+38, r1	; 0x26
    1000:	1f a2       	std	Y+39, r1	; 0x27
    1002:	18 a6       	std	Y+40, r1	; 0x28
    1004:	20 cf       	rjmp	.-448    	; 0xe46 <main+0x136>
		}
		/* This means the user Entered the two numbers and the operator then pressed equal */
		else if(key == EQUAL)
    1006:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1008:	9e 8d       	ldd	r25, Y+30	; 0x1e
    100a:	af 8d       	ldd	r26, Y+31	; 0x1f
    100c:	b8 a1       	ldd	r27, Y+32	; 0x20
    100e:	8d 33       	cpi	r24, 0x3D	; 61
    1010:	91 05       	cpc	r25, r1
    1012:	a1 05       	cpc	r26, r1
    1014:	b1 05       	cpc	r27, r1
    1016:	d9 f4       	brne	.+54     	; 0x104e <main+0x33e>
		{

			calculator(num1, num2, operator);
    1018:	89 a5       	ldd	r24, Y+41	; 0x29
    101a:	9d a1       	ldd	r25, Y+37	; 0x25
    101c:	29 a1       	ldd	r18, Y+33	; 0x21
    101e:	69 2f       	mov	r22, r25
    1020:	42 2f       	mov	r20, r18
    1022:	0e 94 a3 05 	call	0xb46	; 0xb46 <calculator>
			LCD_intgerToString(result);
    1026:	20 91 b0 00 	lds	r18, 0x00B0
    102a:	30 91 b1 00 	lds	r19, 0x00B1
    102e:	40 91 b2 00 	lds	r20, 0x00B2
    1032:	50 91 b3 00 	lds	r21, 0x00B3
    1036:	60 91 b4 00 	lds	r22, 0x00B4
    103a:	70 91 b5 00 	lds	r23, 0x00B5
    103e:	80 91 b6 00 	lds	r24, 0x00B6
    1042:	90 91 b7 00 	lds	r25, 0x00B7
    1046:	c9 01       	movw	r24, r18
    1048:	0e 94 09 12 	call	0x2412	; 0x2412 <LCD_intgerToString>
    104c:	fc ce       	rjmp	.-520    	; 0xe46 <main+0x136>
		}
		/* Clear Button to clear the LCD & reset the values */
		else if(key == CLEAR_BUTTON)
    104e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1050:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1052:	af 8d       	ldd	r26, Y+31	; 0x1f
    1054:	b8 a1       	ldd	r27, Y+32	; 0x20
    1056:	8d 30       	cpi	r24, 0x0D	; 13
    1058:	91 05       	cpc	r25, r1
    105a:	a1 05       	cpc	r26, r1
    105c:	b1 05       	cpc	r27, r1
    105e:	09 f0       	breq	.+2      	; 0x1062 <main+0x352>
    1060:	f2 ce       	rjmp	.-540    	; 0xe46 <main+0x136>
		{
			LCD_clearScreen();
    1062:	0e 94 2c 12 	call	0x2458	; 0x2458 <LCD_clearScreen>
			num1 = ZERO, num2 = ZERO, operator = ZERO;
    1066:	19 a6       	std	Y+41, r1	; 0x29
    1068:	1a a6       	std	Y+42, r1	; 0x2a
    106a:	1b a6       	std	Y+43, r1	; 0x2b
    106c:	1c a6       	std	Y+44, r1	; 0x2c
    106e:	1d a2       	std	Y+37, r1	; 0x25
    1070:	1e a2       	std	Y+38, r1	; 0x26
    1072:	1f a2       	std	Y+39, r1	; 0x27
    1074:	18 a6       	std	Y+40, r1	; 0x28
    1076:	19 a2       	std	Y+33, r1	; 0x21
    1078:	1a a2       	std	Y+34, r1	; 0x22
    107a:	1b a2       	std	Y+35, r1	; 0x23
    107c:	1c a2       	std	Y+36, r1	; 0x24
			LCD_displayString("Op: ");
    107e:	82 ea       	ldi	r24, 0xA2	; 162
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	0e 94 85 11 	call	0x230a	; 0x230a <LCD_displayString>
    1086:	df ce       	rjmp	.-578    	; 0xe46 <main+0x136>

00001088 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1088:	df 93       	push	r29
    108a:	cf 93       	push	r28
    108c:	00 d0       	rcall	.+0      	; 0x108e <GPIO_setupPinDirection+0x6>
    108e:	00 d0       	rcall	.+0      	; 0x1090 <GPIO_setupPinDirection+0x8>
    1090:	0f 92       	push	r0
    1092:	cd b7       	in	r28, 0x3d	; 61
    1094:	de b7       	in	r29, 0x3e	; 62
    1096:	89 83       	std	Y+1, r24	; 0x01
    1098:	6a 83       	std	Y+2, r22	; 0x02
    109a:	4b 83       	std	Y+3, r20	; 0x03
	if(port_num>= NUM_OF_PORTS || pin_num>= NUM_OF_PINS_PER_PORT)
    109c:	89 81       	ldd	r24, Y+1	; 0x01
    109e:	84 30       	cpi	r24, 0x04	; 4
    10a0:	08 f0       	brcs	.+2      	; 0x10a4 <GPIO_setupPinDirection+0x1c>
    10a2:	d5 c0       	rjmp	.+426    	; 0x124e <GPIO_setupPinDirection+0x1c6>
    10a4:	8a 81       	ldd	r24, Y+2	; 0x02
    10a6:	88 30       	cpi	r24, 0x08	; 8
    10a8:	08 f0       	brcs	.+2      	; 0x10ac <GPIO_setupPinDirection+0x24>
    10aa:	d1 c0       	rjmp	.+418    	; 0x124e <GPIO_setupPinDirection+0x1c6>
		/*Do Nothing*/
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    10ac:	89 81       	ldd	r24, Y+1	; 0x01
    10ae:	28 2f       	mov	r18, r24
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	3d 83       	std	Y+5, r19	; 0x05
    10b4:	2c 83       	std	Y+4, r18	; 0x04
    10b6:	8c 81       	ldd	r24, Y+4	; 0x04
    10b8:	9d 81       	ldd	r25, Y+5	; 0x05
    10ba:	81 30       	cpi	r24, 0x01	; 1
    10bc:	91 05       	cpc	r25, r1
    10be:	09 f4       	brne	.+2      	; 0x10c2 <GPIO_setupPinDirection+0x3a>
    10c0:	43 c0       	rjmp	.+134    	; 0x1148 <GPIO_setupPinDirection+0xc0>
    10c2:	2c 81       	ldd	r18, Y+4	; 0x04
    10c4:	3d 81       	ldd	r19, Y+5	; 0x05
    10c6:	22 30       	cpi	r18, 0x02	; 2
    10c8:	31 05       	cpc	r19, r1
    10ca:	2c f4       	brge	.+10     	; 0x10d6 <GPIO_setupPinDirection+0x4e>
    10cc:	8c 81       	ldd	r24, Y+4	; 0x04
    10ce:	9d 81       	ldd	r25, Y+5	; 0x05
    10d0:	00 97       	sbiw	r24, 0x00	; 0
    10d2:	71 f0       	breq	.+28     	; 0x10f0 <GPIO_setupPinDirection+0x68>
    10d4:	bc c0       	rjmp	.+376    	; 0x124e <GPIO_setupPinDirection+0x1c6>
    10d6:	2c 81       	ldd	r18, Y+4	; 0x04
    10d8:	3d 81       	ldd	r19, Y+5	; 0x05
    10da:	22 30       	cpi	r18, 0x02	; 2
    10dc:	31 05       	cpc	r19, r1
    10de:	09 f4       	brne	.+2      	; 0x10e2 <GPIO_setupPinDirection+0x5a>
    10e0:	5f c0       	rjmp	.+190    	; 0x11a0 <GPIO_setupPinDirection+0x118>
    10e2:	8c 81       	ldd	r24, Y+4	; 0x04
    10e4:	9d 81       	ldd	r25, Y+5	; 0x05
    10e6:	83 30       	cpi	r24, 0x03	; 3
    10e8:	91 05       	cpc	r25, r1
    10ea:	09 f4       	brne	.+2      	; 0x10ee <GPIO_setupPinDirection+0x66>
    10ec:	85 c0       	rjmp	.+266    	; 0x11f8 <GPIO_setupPinDirection+0x170>
    10ee:	af c0       	rjmp	.+350    	; 0x124e <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    10f0:	8b 81       	ldd	r24, Y+3	; 0x03
    10f2:	81 30       	cpi	r24, 0x01	; 1
    10f4:	a1 f4       	brne	.+40     	; 0x111e <GPIO_setupPinDirection+0x96>
				SET_BIT(DDRA, pin_num);
    10f6:	aa e3       	ldi	r26, 0x3A	; 58
    10f8:	b0 e0       	ldi	r27, 0x00	; 0
    10fa:	ea e3       	ldi	r30, 0x3A	; 58
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	48 2f       	mov	r20, r24
    1102:	8a 81       	ldd	r24, Y+2	; 0x02
    1104:	28 2f       	mov	r18, r24
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	02 2e       	mov	r0, r18
    110e:	02 c0       	rjmp	.+4      	; 0x1114 <GPIO_setupPinDirection+0x8c>
    1110:	88 0f       	add	r24, r24
    1112:	99 1f       	adc	r25, r25
    1114:	0a 94       	dec	r0
    1116:	e2 f7       	brpl	.-8      	; 0x1110 <GPIO_setupPinDirection+0x88>
    1118:	84 2b       	or	r24, r20
    111a:	8c 93       	st	X, r24
    111c:	98 c0       	rjmp	.+304    	; 0x124e <GPIO_setupPinDirection+0x1c6>
			else
				CLEAR_BIT(DDRA, pin_num);
    111e:	aa e3       	ldi	r26, 0x3A	; 58
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	ea e3       	ldi	r30, 0x3A	; 58
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	48 2f       	mov	r20, r24
    112a:	8a 81       	ldd	r24, Y+2	; 0x02
    112c:	28 2f       	mov	r18, r24
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	02 2e       	mov	r0, r18
    1136:	02 c0       	rjmp	.+4      	; 0x113c <GPIO_setupPinDirection+0xb4>
    1138:	88 0f       	add	r24, r24
    113a:	99 1f       	adc	r25, r25
    113c:	0a 94       	dec	r0
    113e:	e2 f7       	brpl	.-8      	; 0x1138 <GPIO_setupPinDirection+0xb0>
    1140:	80 95       	com	r24
    1142:	84 23       	and	r24, r20
    1144:	8c 93       	st	X, r24
    1146:	83 c0       	rjmp	.+262    	; 0x124e <GPIO_setupPinDirection+0x1c6>
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1148:	8b 81       	ldd	r24, Y+3	; 0x03
    114a:	81 30       	cpi	r24, 0x01	; 1
    114c:	a1 f4       	brne	.+40     	; 0x1176 <GPIO_setupPinDirection+0xee>
				SET_BIT(DDRB, pin_num);
    114e:	a7 e3       	ldi	r26, 0x37	; 55
    1150:	b0 e0       	ldi	r27, 0x00	; 0
    1152:	e7 e3       	ldi	r30, 0x37	; 55
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 81       	ld	r24, Z
    1158:	48 2f       	mov	r20, r24
    115a:	8a 81       	ldd	r24, Y+2	; 0x02
    115c:	28 2f       	mov	r18, r24
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	02 2e       	mov	r0, r18
    1166:	02 c0       	rjmp	.+4      	; 0x116c <GPIO_setupPinDirection+0xe4>
    1168:	88 0f       	add	r24, r24
    116a:	99 1f       	adc	r25, r25
    116c:	0a 94       	dec	r0
    116e:	e2 f7       	brpl	.-8      	; 0x1168 <GPIO_setupPinDirection+0xe0>
    1170:	84 2b       	or	r24, r20
    1172:	8c 93       	st	X, r24
    1174:	6c c0       	rjmp	.+216    	; 0x124e <GPIO_setupPinDirection+0x1c6>
			else
				CLEAR_BIT(DDRB, pin_num);
    1176:	a7 e3       	ldi	r26, 0x37	; 55
    1178:	b0 e0       	ldi	r27, 0x00	; 0
    117a:	e7 e3       	ldi	r30, 0x37	; 55
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	80 81       	ld	r24, Z
    1180:	48 2f       	mov	r20, r24
    1182:	8a 81       	ldd	r24, Y+2	; 0x02
    1184:	28 2f       	mov	r18, r24
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	02 2e       	mov	r0, r18
    118e:	02 c0       	rjmp	.+4      	; 0x1194 <GPIO_setupPinDirection+0x10c>
    1190:	88 0f       	add	r24, r24
    1192:	99 1f       	adc	r25, r25
    1194:	0a 94       	dec	r0
    1196:	e2 f7       	brpl	.-8      	; 0x1190 <GPIO_setupPinDirection+0x108>
    1198:	80 95       	com	r24
    119a:	84 23       	and	r24, r20
    119c:	8c 93       	st	X, r24
    119e:	57 c0       	rjmp	.+174    	; 0x124e <GPIO_setupPinDirection+0x1c6>
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    11a0:	8b 81       	ldd	r24, Y+3	; 0x03
    11a2:	81 30       	cpi	r24, 0x01	; 1
    11a4:	a1 f4       	brne	.+40     	; 0x11ce <GPIO_setupPinDirection+0x146>
				SET_BIT(DDRC, pin_num);
    11a6:	a4 e3       	ldi	r26, 0x34	; 52
    11a8:	b0 e0       	ldi	r27, 0x00	; 0
    11aa:	e4 e3       	ldi	r30, 0x34	; 52
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	48 2f       	mov	r20, r24
    11b2:	8a 81       	ldd	r24, Y+2	; 0x02
    11b4:	28 2f       	mov	r18, r24
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	02 2e       	mov	r0, r18
    11be:	02 c0       	rjmp	.+4      	; 0x11c4 <GPIO_setupPinDirection+0x13c>
    11c0:	88 0f       	add	r24, r24
    11c2:	99 1f       	adc	r25, r25
    11c4:	0a 94       	dec	r0
    11c6:	e2 f7       	brpl	.-8      	; 0x11c0 <GPIO_setupPinDirection+0x138>
    11c8:	84 2b       	or	r24, r20
    11ca:	8c 93       	st	X, r24
    11cc:	40 c0       	rjmp	.+128    	; 0x124e <GPIO_setupPinDirection+0x1c6>
			else
				CLEAR_BIT(DDRC, pin_num);
    11ce:	a4 e3       	ldi	r26, 0x34	; 52
    11d0:	b0 e0       	ldi	r27, 0x00	; 0
    11d2:	e4 e3       	ldi	r30, 0x34	; 52
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	48 2f       	mov	r20, r24
    11da:	8a 81       	ldd	r24, Y+2	; 0x02
    11dc:	28 2f       	mov	r18, r24
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	02 2e       	mov	r0, r18
    11e6:	02 c0       	rjmp	.+4      	; 0x11ec <GPIO_setupPinDirection+0x164>
    11e8:	88 0f       	add	r24, r24
    11ea:	99 1f       	adc	r25, r25
    11ec:	0a 94       	dec	r0
    11ee:	e2 f7       	brpl	.-8      	; 0x11e8 <GPIO_setupPinDirection+0x160>
    11f0:	80 95       	com	r24
    11f2:	84 23       	and	r24, r20
    11f4:	8c 93       	st	X, r24
    11f6:	2b c0       	rjmp	.+86     	; 0x124e <GPIO_setupPinDirection+0x1c6>
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    11f8:	8b 81       	ldd	r24, Y+3	; 0x03
    11fa:	81 30       	cpi	r24, 0x01	; 1
    11fc:	a1 f4       	brne	.+40     	; 0x1226 <GPIO_setupPinDirection+0x19e>
				SET_BIT(DDRD, pin_num);
    11fe:	a1 e3       	ldi	r26, 0x31	; 49
    1200:	b0 e0       	ldi	r27, 0x00	; 0
    1202:	e1 e3       	ldi	r30, 0x31	; 49
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 81       	ld	r24, Z
    1208:	48 2f       	mov	r20, r24
    120a:	8a 81       	ldd	r24, Y+2	; 0x02
    120c:	28 2f       	mov	r18, r24
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	02 2e       	mov	r0, r18
    1216:	02 c0       	rjmp	.+4      	; 0x121c <GPIO_setupPinDirection+0x194>
    1218:	88 0f       	add	r24, r24
    121a:	99 1f       	adc	r25, r25
    121c:	0a 94       	dec	r0
    121e:	e2 f7       	brpl	.-8      	; 0x1218 <GPIO_setupPinDirection+0x190>
    1220:	84 2b       	or	r24, r20
    1222:	8c 93       	st	X, r24
    1224:	14 c0       	rjmp	.+40     	; 0x124e <GPIO_setupPinDirection+0x1c6>
			else
				CLEAR_BIT(DDRD, pin_num);
    1226:	a1 e3       	ldi	r26, 0x31	; 49
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	e1 e3       	ldi	r30, 0x31	; 49
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	48 2f       	mov	r20, r24
    1232:	8a 81       	ldd	r24, Y+2	; 0x02
    1234:	28 2f       	mov	r18, r24
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	02 2e       	mov	r0, r18
    123e:	02 c0       	rjmp	.+4      	; 0x1244 <GPIO_setupPinDirection+0x1bc>
    1240:	88 0f       	add	r24, r24
    1242:	99 1f       	adc	r25, r25
    1244:	0a 94       	dec	r0
    1246:	e2 f7       	brpl	.-8      	; 0x1240 <GPIO_setupPinDirection+0x1b8>
    1248:	80 95       	com	r24
    124a:	84 23       	and	r24, r20
    124c:	8c 93       	st	X, r24
			break;
		}
	}
}
    124e:	0f 90       	pop	r0
    1250:	0f 90       	pop	r0
    1252:	0f 90       	pop	r0
    1254:	0f 90       	pop	r0
    1256:	0f 90       	pop	r0
    1258:	cf 91       	pop	r28
    125a:	df 91       	pop	r29
    125c:	08 95       	ret

0000125e <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    125e:	df 93       	push	r29
    1260:	cf 93       	push	r28
    1262:	00 d0       	rcall	.+0      	; 0x1264 <GPIO_writePin+0x6>
    1264:	00 d0       	rcall	.+0      	; 0x1266 <GPIO_writePin+0x8>
    1266:	0f 92       	push	r0
    1268:	cd b7       	in	r28, 0x3d	; 61
    126a:	de b7       	in	r29, 0x3e	; 62
    126c:	89 83       	std	Y+1, r24	; 0x01
    126e:	6a 83       	std	Y+2, r22	; 0x02
    1270:	4b 83       	std	Y+3, r20	; 0x03
	if(port_num>= NUM_OF_PORTS || pin_num>= NUM_OF_PINS_PER_PORT)
    1272:	89 81       	ldd	r24, Y+1	; 0x01
    1274:	84 30       	cpi	r24, 0x04	; 4
    1276:	08 f0       	brcs	.+2      	; 0x127a <GPIO_writePin+0x1c>
    1278:	d5 c0       	rjmp	.+426    	; 0x1424 <GPIO_writePin+0x1c6>
    127a:	8a 81       	ldd	r24, Y+2	; 0x02
    127c:	88 30       	cpi	r24, 0x08	; 8
    127e:	08 f0       	brcs	.+2      	; 0x1282 <GPIO_writePin+0x24>
    1280:	d1 c0       	rjmp	.+418    	; 0x1424 <GPIO_writePin+0x1c6>
	{
		/*Do Nothing*/
	}
	else
	{
		switch(port_num)
    1282:	89 81       	ldd	r24, Y+1	; 0x01
    1284:	28 2f       	mov	r18, r24
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	3d 83       	std	Y+5, r19	; 0x05
    128a:	2c 83       	std	Y+4, r18	; 0x04
    128c:	8c 81       	ldd	r24, Y+4	; 0x04
    128e:	9d 81       	ldd	r25, Y+5	; 0x05
    1290:	81 30       	cpi	r24, 0x01	; 1
    1292:	91 05       	cpc	r25, r1
    1294:	09 f4       	brne	.+2      	; 0x1298 <GPIO_writePin+0x3a>
    1296:	43 c0       	rjmp	.+134    	; 0x131e <GPIO_writePin+0xc0>
    1298:	2c 81       	ldd	r18, Y+4	; 0x04
    129a:	3d 81       	ldd	r19, Y+5	; 0x05
    129c:	22 30       	cpi	r18, 0x02	; 2
    129e:	31 05       	cpc	r19, r1
    12a0:	2c f4       	brge	.+10     	; 0x12ac <GPIO_writePin+0x4e>
    12a2:	8c 81       	ldd	r24, Y+4	; 0x04
    12a4:	9d 81       	ldd	r25, Y+5	; 0x05
    12a6:	00 97       	sbiw	r24, 0x00	; 0
    12a8:	71 f0       	breq	.+28     	; 0x12c6 <GPIO_writePin+0x68>
    12aa:	bc c0       	rjmp	.+376    	; 0x1424 <GPIO_writePin+0x1c6>
    12ac:	2c 81       	ldd	r18, Y+4	; 0x04
    12ae:	3d 81       	ldd	r19, Y+5	; 0x05
    12b0:	22 30       	cpi	r18, 0x02	; 2
    12b2:	31 05       	cpc	r19, r1
    12b4:	09 f4       	brne	.+2      	; 0x12b8 <GPIO_writePin+0x5a>
    12b6:	5f c0       	rjmp	.+190    	; 0x1376 <GPIO_writePin+0x118>
    12b8:	8c 81       	ldd	r24, Y+4	; 0x04
    12ba:	9d 81       	ldd	r25, Y+5	; 0x05
    12bc:	83 30       	cpi	r24, 0x03	; 3
    12be:	91 05       	cpc	r25, r1
    12c0:	09 f4       	brne	.+2      	; 0x12c4 <GPIO_writePin+0x66>
    12c2:	85 c0       	rjmp	.+266    	; 0x13ce <GPIO_writePin+0x170>
    12c4:	af c0       	rjmp	.+350    	; 0x1424 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    12c6:	8b 81       	ldd	r24, Y+3	; 0x03
    12c8:	81 30       	cpi	r24, 0x01	; 1
    12ca:	a1 f4       	brne	.+40     	; 0x12f4 <GPIO_writePin+0x96>
				SET_BIT(PORTA,pin_num);
    12cc:	ab e3       	ldi	r26, 0x3B	; 59
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	eb e3       	ldi	r30, 0x3B	; 59
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	48 2f       	mov	r20, r24
    12d8:	8a 81       	ldd	r24, Y+2	; 0x02
    12da:	28 2f       	mov	r18, r24
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	02 2e       	mov	r0, r18
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <GPIO_writePin+0x8c>
    12e6:	88 0f       	add	r24, r24
    12e8:	99 1f       	adc	r25, r25
    12ea:	0a 94       	dec	r0
    12ec:	e2 f7       	brpl	.-8      	; 0x12e6 <GPIO_writePin+0x88>
    12ee:	84 2b       	or	r24, r20
    12f0:	8c 93       	st	X, r24
    12f2:	98 c0       	rjmp	.+304    	; 0x1424 <GPIO_writePin+0x1c6>
			else
				CLEAR_BIT(PORTA,pin_num);
    12f4:	ab e3       	ldi	r26, 0x3B	; 59
    12f6:	b0 e0       	ldi	r27, 0x00	; 0
    12f8:	eb e3       	ldi	r30, 0x3B	; 59
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	48 2f       	mov	r20, r24
    1300:	8a 81       	ldd	r24, Y+2	; 0x02
    1302:	28 2f       	mov	r18, r24
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	02 2e       	mov	r0, r18
    130c:	02 c0       	rjmp	.+4      	; 0x1312 <GPIO_writePin+0xb4>
    130e:	88 0f       	add	r24, r24
    1310:	99 1f       	adc	r25, r25
    1312:	0a 94       	dec	r0
    1314:	e2 f7       	brpl	.-8      	; 0x130e <GPIO_writePin+0xb0>
    1316:	80 95       	com	r24
    1318:	84 23       	and	r24, r20
    131a:	8c 93       	st	X, r24
    131c:	83 c0       	rjmp	.+262    	; 0x1424 <GPIO_writePin+0x1c6>
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    131e:	8b 81       	ldd	r24, Y+3	; 0x03
    1320:	81 30       	cpi	r24, 0x01	; 1
    1322:	a1 f4       	brne	.+40     	; 0x134c <GPIO_writePin+0xee>
				SET_BIT(PORTB,pin_num);
    1324:	a8 e3       	ldi	r26, 0x38	; 56
    1326:	b0 e0       	ldi	r27, 0x00	; 0
    1328:	e8 e3       	ldi	r30, 0x38	; 56
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	80 81       	ld	r24, Z
    132e:	48 2f       	mov	r20, r24
    1330:	8a 81       	ldd	r24, Y+2	; 0x02
    1332:	28 2f       	mov	r18, r24
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	02 2e       	mov	r0, r18
    133c:	02 c0       	rjmp	.+4      	; 0x1342 <GPIO_writePin+0xe4>
    133e:	88 0f       	add	r24, r24
    1340:	99 1f       	adc	r25, r25
    1342:	0a 94       	dec	r0
    1344:	e2 f7       	brpl	.-8      	; 0x133e <GPIO_writePin+0xe0>
    1346:	84 2b       	or	r24, r20
    1348:	8c 93       	st	X, r24
    134a:	6c c0       	rjmp	.+216    	; 0x1424 <GPIO_writePin+0x1c6>
			else
				CLEAR_BIT(PORTB,pin_num);
    134c:	a8 e3       	ldi	r26, 0x38	; 56
    134e:	b0 e0       	ldi	r27, 0x00	; 0
    1350:	e8 e3       	ldi	r30, 0x38	; 56
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	80 81       	ld	r24, Z
    1356:	48 2f       	mov	r20, r24
    1358:	8a 81       	ldd	r24, Y+2	; 0x02
    135a:	28 2f       	mov	r18, r24
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	02 2e       	mov	r0, r18
    1364:	02 c0       	rjmp	.+4      	; 0x136a <GPIO_writePin+0x10c>
    1366:	88 0f       	add	r24, r24
    1368:	99 1f       	adc	r25, r25
    136a:	0a 94       	dec	r0
    136c:	e2 f7       	brpl	.-8      	; 0x1366 <GPIO_writePin+0x108>
    136e:	80 95       	com	r24
    1370:	84 23       	and	r24, r20
    1372:	8c 93       	st	X, r24
    1374:	57 c0       	rjmp	.+174    	; 0x1424 <GPIO_writePin+0x1c6>
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1376:	8b 81       	ldd	r24, Y+3	; 0x03
    1378:	81 30       	cpi	r24, 0x01	; 1
    137a:	a1 f4       	brne	.+40     	; 0x13a4 <GPIO_writePin+0x146>
				SET_BIT(PORTC,pin_num);
    137c:	a5 e3       	ldi	r26, 0x35	; 53
    137e:	b0 e0       	ldi	r27, 0x00	; 0
    1380:	e5 e3       	ldi	r30, 0x35	; 53
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	80 81       	ld	r24, Z
    1386:	48 2f       	mov	r20, r24
    1388:	8a 81       	ldd	r24, Y+2	; 0x02
    138a:	28 2f       	mov	r18, r24
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	02 2e       	mov	r0, r18
    1394:	02 c0       	rjmp	.+4      	; 0x139a <GPIO_writePin+0x13c>
    1396:	88 0f       	add	r24, r24
    1398:	99 1f       	adc	r25, r25
    139a:	0a 94       	dec	r0
    139c:	e2 f7       	brpl	.-8      	; 0x1396 <GPIO_writePin+0x138>
    139e:	84 2b       	or	r24, r20
    13a0:	8c 93       	st	X, r24
    13a2:	40 c0       	rjmp	.+128    	; 0x1424 <GPIO_writePin+0x1c6>
			else
				CLEAR_BIT(PORTC,pin_num);
    13a4:	a5 e3       	ldi	r26, 0x35	; 53
    13a6:	b0 e0       	ldi	r27, 0x00	; 0
    13a8:	e5 e3       	ldi	r30, 0x35	; 53
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	48 2f       	mov	r20, r24
    13b0:	8a 81       	ldd	r24, Y+2	; 0x02
    13b2:	28 2f       	mov	r18, r24
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	02 2e       	mov	r0, r18
    13bc:	02 c0       	rjmp	.+4      	; 0x13c2 <GPIO_writePin+0x164>
    13be:	88 0f       	add	r24, r24
    13c0:	99 1f       	adc	r25, r25
    13c2:	0a 94       	dec	r0
    13c4:	e2 f7       	brpl	.-8      	; 0x13be <GPIO_writePin+0x160>
    13c6:	80 95       	com	r24
    13c8:	84 23       	and	r24, r20
    13ca:	8c 93       	st	X, r24
    13cc:	2b c0       	rjmp	.+86     	; 0x1424 <GPIO_writePin+0x1c6>
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    13ce:	8b 81       	ldd	r24, Y+3	; 0x03
    13d0:	81 30       	cpi	r24, 0x01	; 1
    13d2:	a1 f4       	brne	.+40     	; 0x13fc <GPIO_writePin+0x19e>
				SET_BIT(PORTD,pin_num);
    13d4:	a2 e3       	ldi	r26, 0x32	; 50
    13d6:	b0 e0       	ldi	r27, 0x00	; 0
    13d8:	e2 e3       	ldi	r30, 0x32	; 50
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	48 2f       	mov	r20, r24
    13e0:	8a 81       	ldd	r24, Y+2	; 0x02
    13e2:	28 2f       	mov	r18, r24
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	81 e0       	ldi	r24, 0x01	; 1
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	02 2e       	mov	r0, r18
    13ec:	02 c0       	rjmp	.+4      	; 0x13f2 <GPIO_writePin+0x194>
    13ee:	88 0f       	add	r24, r24
    13f0:	99 1f       	adc	r25, r25
    13f2:	0a 94       	dec	r0
    13f4:	e2 f7       	brpl	.-8      	; 0x13ee <GPIO_writePin+0x190>
    13f6:	84 2b       	or	r24, r20
    13f8:	8c 93       	st	X, r24
    13fa:	14 c0       	rjmp	.+40     	; 0x1424 <GPIO_writePin+0x1c6>
			else
				CLEAR_BIT(PORTD,pin_num);
    13fc:	a2 e3       	ldi	r26, 0x32	; 50
    13fe:	b0 e0       	ldi	r27, 0x00	; 0
    1400:	e2 e3       	ldi	r30, 0x32	; 50
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	80 81       	ld	r24, Z
    1406:	48 2f       	mov	r20, r24
    1408:	8a 81       	ldd	r24, Y+2	; 0x02
    140a:	28 2f       	mov	r18, r24
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	81 e0       	ldi	r24, 0x01	; 1
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	02 2e       	mov	r0, r18
    1414:	02 c0       	rjmp	.+4      	; 0x141a <GPIO_writePin+0x1bc>
    1416:	88 0f       	add	r24, r24
    1418:	99 1f       	adc	r25, r25
    141a:	0a 94       	dec	r0
    141c:	e2 f7       	brpl	.-8      	; 0x1416 <GPIO_writePin+0x1b8>
    141e:	80 95       	com	r24
    1420:	84 23       	and	r24, r20
    1422:	8c 93       	st	X, r24
			break;
		}
	}
}
    1424:	0f 90       	pop	r0
    1426:	0f 90       	pop	r0
    1428:	0f 90       	pop	r0
    142a:	0f 90       	pop	r0
    142c:	0f 90       	pop	r0
    142e:	cf 91       	pop	r28
    1430:	df 91       	pop	r29
    1432:	08 95       	ret

00001434 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1434:	df 93       	push	r29
    1436:	cf 93       	push	r28
    1438:	00 d0       	rcall	.+0      	; 0x143a <GPIO_readPin+0x6>
    143a:	00 d0       	rcall	.+0      	; 0x143c <GPIO_readPin+0x8>
    143c:	0f 92       	push	r0
    143e:	cd b7       	in	r28, 0x3d	; 61
    1440:	de b7       	in	r29, 0x3e	; 62
    1442:	8a 83       	std	Y+2, r24	; 0x02
    1444:	6b 83       	std	Y+3, r22	; 0x03
	uint8 value = LOGIC_LOW;
    1446:	19 82       	std	Y+1, r1	; 0x01
	switch(port_num)
    1448:	8a 81       	ldd	r24, Y+2	; 0x02
    144a:	28 2f       	mov	r18, r24
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	3d 83       	std	Y+5, r19	; 0x05
    1450:	2c 83       	std	Y+4, r18	; 0x04
    1452:	4c 81       	ldd	r20, Y+4	; 0x04
    1454:	5d 81       	ldd	r21, Y+5	; 0x05
    1456:	41 30       	cpi	r20, 0x01	; 1
    1458:	51 05       	cpc	r21, r1
    145a:	79 f1       	breq	.+94     	; 0x14ba <GPIO_readPin+0x86>
    145c:	8c 81       	ldd	r24, Y+4	; 0x04
    145e:	9d 81       	ldd	r25, Y+5	; 0x05
    1460:	82 30       	cpi	r24, 0x02	; 2
    1462:	91 05       	cpc	r25, r1
    1464:	34 f4       	brge	.+12     	; 0x1472 <GPIO_readPin+0x3e>
    1466:	2c 81       	ldd	r18, Y+4	; 0x04
    1468:	3d 81       	ldd	r19, Y+5	; 0x05
    146a:	21 15       	cp	r18, r1
    146c:	31 05       	cpc	r19, r1
    146e:	69 f0       	breq	.+26     	; 0x148a <GPIO_readPin+0x56>
    1470:	6b c0       	rjmp	.+214    	; 0x1548 <GPIO_readPin+0x114>
    1472:	4c 81       	ldd	r20, Y+4	; 0x04
    1474:	5d 81       	ldd	r21, Y+5	; 0x05
    1476:	42 30       	cpi	r20, 0x02	; 2
    1478:	51 05       	cpc	r21, r1
    147a:	b9 f1       	breq	.+110    	; 0x14ea <GPIO_readPin+0xb6>
    147c:	8c 81       	ldd	r24, Y+4	; 0x04
    147e:	9d 81       	ldd	r25, Y+5	; 0x05
    1480:	83 30       	cpi	r24, 0x03	; 3
    1482:	91 05       	cpc	r25, r1
    1484:	09 f4       	brne	.+2      	; 0x1488 <GPIO_readPin+0x54>
    1486:	49 c0       	rjmp	.+146    	; 0x151a <GPIO_readPin+0xe6>
    1488:	5f c0       	rjmp	.+190    	; 0x1548 <GPIO_readPin+0x114>
	{
	case PORTA_ID:
		if(BIT_IS_SET(PINA,pin_num))
    148a:	e9 e3       	ldi	r30, 0x39	; 57
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	80 81       	ld	r24, Z
    1490:	28 2f       	mov	r18, r24
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	8b 81       	ldd	r24, Y+3	; 0x03
    1496:	88 2f       	mov	r24, r24
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	a9 01       	movw	r20, r18
    149c:	02 c0       	rjmp	.+4      	; 0x14a2 <GPIO_readPin+0x6e>
    149e:	55 95       	asr	r21
    14a0:	47 95       	ror	r20
    14a2:	8a 95       	dec	r24
    14a4:	e2 f7       	brpl	.-8      	; 0x149e <GPIO_readPin+0x6a>
    14a6:	ca 01       	movw	r24, r20
    14a8:	81 70       	andi	r24, 0x01	; 1
    14aa:	90 70       	andi	r25, 0x00	; 0
    14ac:	88 23       	and	r24, r24
    14ae:	19 f0       	breq	.+6      	; 0x14b6 <GPIO_readPin+0x82>
			value = LOGIC_HIGH;
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	89 83       	std	Y+1, r24	; 0x01
    14b4:	49 c0       	rjmp	.+146    	; 0x1548 <GPIO_readPin+0x114>
		else
			value = LOGIC_LOW;
    14b6:	19 82       	std	Y+1, r1	; 0x01
    14b8:	47 c0       	rjmp	.+142    	; 0x1548 <GPIO_readPin+0x114>
		break;
	case PORTB_ID:
		if(BIT_IS_SET(PINB,pin_num))
    14ba:	e6 e3       	ldi	r30, 0x36	; 54
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	28 2f       	mov	r18, r24
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	8b 81       	ldd	r24, Y+3	; 0x03
    14c6:	88 2f       	mov	r24, r24
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	a9 01       	movw	r20, r18
    14cc:	02 c0       	rjmp	.+4      	; 0x14d2 <GPIO_readPin+0x9e>
    14ce:	55 95       	asr	r21
    14d0:	47 95       	ror	r20
    14d2:	8a 95       	dec	r24
    14d4:	e2 f7       	brpl	.-8      	; 0x14ce <GPIO_readPin+0x9a>
    14d6:	ca 01       	movw	r24, r20
    14d8:	81 70       	andi	r24, 0x01	; 1
    14da:	90 70       	andi	r25, 0x00	; 0
    14dc:	88 23       	and	r24, r24
    14de:	19 f0       	breq	.+6      	; 0x14e6 <GPIO_readPin+0xb2>
			value = LOGIC_HIGH;
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	89 83       	std	Y+1, r24	; 0x01
    14e4:	31 c0       	rjmp	.+98     	; 0x1548 <GPIO_readPin+0x114>
		else
			value = LOGIC_LOW;
    14e6:	19 82       	std	Y+1, r1	; 0x01
    14e8:	2f c0       	rjmp	.+94     	; 0x1548 <GPIO_readPin+0x114>
		break;
	case PORTC_ID:
		if(BIT_IS_SET(PINC,pin_num))
    14ea:	e3 e3       	ldi	r30, 0x33	; 51
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	28 2f       	mov	r18, r24
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	8b 81       	ldd	r24, Y+3	; 0x03
    14f6:	88 2f       	mov	r24, r24
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	a9 01       	movw	r20, r18
    14fc:	02 c0       	rjmp	.+4      	; 0x1502 <GPIO_readPin+0xce>
    14fe:	55 95       	asr	r21
    1500:	47 95       	ror	r20
    1502:	8a 95       	dec	r24
    1504:	e2 f7       	brpl	.-8      	; 0x14fe <GPIO_readPin+0xca>
    1506:	ca 01       	movw	r24, r20
    1508:	81 70       	andi	r24, 0x01	; 1
    150a:	90 70       	andi	r25, 0x00	; 0
    150c:	88 23       	and	r24, r24
    150e:	19 f0       	breq	.+6      	; 0x1516 <GPIO_readPin+0xe2>
			value = LOGIC_HIGH;
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	89 83       	std	Y+1, r24	; 0x01
    1514:	19 c0       	rjmp	.+50     	; 0x1548 <GPIO_readPin+0x114>
		else
			value = LOGIC_LOW;
    1516:	19 82       	std	Y+1, r1	; 0x01
    1518:	17 c0       	rjmp	.+46     	; 0x1548 <GPIO_readPin+0x114>
		break;
	case PORTD_ID:
		if(BIT_IS_SET(PIND,pin_num))
    151a:	e0 e3       	ldi	r30, 0x30	; 48
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	80 81       	ld	r24, Z
    1520:	28 2f       	mov	r18, r24
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	8b 81       	ldd	r24, Y+3	; 0x03
    1526:	88 2f       	mov	r24, r24
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	a9 01       	movw	r20, r18
    152c:	02 c0       	rjmp	.+4      	; 0x1532 <GPIO_readPin+0xfe>
    152e:	55 95       	asr	r21
    1530:	47 95       	ror	r20
    1532:	8a 95       	dec	r24
    1534:	e2 f7       	brpl	.-8      	; 0x152e <GPIO_readPin+0xfa>
    1536:	ca 01       	movw	r24, r20
    1538:	81 70       	andi	r24, 0x01	; 1
    153a:	90 70       	andi	r25, 0x00	; 0
    153c:	88 23       	and	r24, r24
    153e:	19 f0       	breq	.+6      	; 0x1546 <GPIO_readPin+0x112>
			value = LOGIC_HIGH;
    1540:	81 e0       	ldi	r24, 0x01	; 1
    1542:	89 83       	std	Y+1, r24	; 0x01
    1544:	01 c0       	rjmp	.+2      	; 0x1548 <GPIO_readPin+0x114>
		else
			value = LOGIC_LOW;
    1546:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	return value;
    1548:	89 81       	ldd	r24, Y+1	; 0x01
}
    154a:	0f 90       	pop	r0
    154c:	0f 90       	pop	r0
    154e:	0f 90       	pop	r0
    1550:	0f 90       	pop	r0
    1552:	0f 90       	pop	r0
    1554:	cf 91       	pop	r28
    1556:	df 91       	pop	r29
    1558:	08 95       	ret

0000155a <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    155a:	df 93       	push	r29
    155c:	cf 93       	push	r28
    155e:	00 d0       	rcall	.+0      	; 0x1560 <GPIO_setupPortDirection+0x6>
    1560:	00 d0       	rcall	.+0      	; 0x1562 <GPIO_setupPortDirection+0x8>
    1562:	cd b7       	in	r28, 0x3d	; 61
    1564:	de b7       	in	r29, 0x3e	; 62
    1566:	89 83       	std	Y+1, r24	; 0x01
    1568:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num>=NUM_OF_PORTS)
    156a:	89 81       	ldd	r24, Y+1	; 0x01
    156c:	84 30       	cpi	r24, 0x04	; 4
    156e:	90 f5       	brcc	.+100    	; 0x15d4 <GPIO_setupPortDirection+0x7a>
		/*Do Nothing*/
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1570:	89 81       	ldd	r24, Y+1	; 0x01
    1572:	28 2f       	mov	r18, r24
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	3c 83       	std	Y+4, r19	; 0x04
    1578:	2b 83       	std	Y+3, r18	; 0x03
    157a:	8b 81       	ldd	r24, Y+3	; 0x03
    157c:	9c 81       	ldd	r25, Y+4	; 0x04
    157e:	81 30       	cpi	r24, 0x01	; 1
    1580:	91 05       	cpc	r25, r1
    1582:	d1 f0       	breq	.+52     	; 0x15b8 <GPIO_setupPortDirection+0x5e>
    1584:	2b 81       	ldd	r18, Y+3	; 0x03
    1586:	3c 81       	ldd	r19, Y+4	; 0x04
    1588:	22 30       	cpi	r18, 0x02	; 2
    158a:	31 05       	cpc	r19, r1
    158c:	2c f4       	brge	.+10     	; 0x1598 <GPIO_setupPortDirection+0x3e>
    158e:	8b 81       	ldd	r24, Y+3	; 0x03
    1590:	9c 81       	ldd	r25, Y+4	; 0x04
    1592:	00 97       	sbiw	r24, 0x00	; 0
    1594:	61 f0       	breq	.+24     	; 0x15ae <GPIO_setupPortDirection+0x54>
    1596:	1e c0       	rjmp	.+60     	; 0x15d4 <GPIO_setupPortDirection+0x7a>
    1598:	2b 81       	ldd	r18, Y+3	; 0x03
    159a:	3c 81       	ldd	r19, Y+4	; 0x04
    159c:	22 30       	cpi	r18, 0x02	; 2
    159e:	31 05       	cpc	r19, r1
    15a0:	81 f0       	breq	.+32     	; 0x15c2 <GPIO_setupPortDirection+0x68>
    15a2:	8b 81       	ldd	r24, Y+3	; 0x03
    15a4:	9c 81       	ldd	r25, Y+4	; 0x04
    15a6:	83 30       	cpi	r24, 0x03	; 3
    15a8:	91 05       	cpc	r25, r1
    15aa:	81 f0       	breq	.+32     	; 0x15cc <GPIO_setupPortDirection+0x72>
    15ac:	13 c0       	rjmp	.+38     	; 0x15d4 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    15ae:	ea e3       	ldi	r30, 0x3A	; 58
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	8a 81       	ldd	r24, Y+2	; 0x02
    15b4:	80 83       	st	Z, r24
    15b6:	0e c0       	rjmp	.+28     	; 0x15d4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    15b8:	e7 e3       	ldi	r30, 0x37	; 55
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	8a 81       	ldd	r24, Y+2	; 0x02
    15be:	80 83       	st	Z, r24
    15c0:	09 c0       	rjmp	.+18     	; 0x15d4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    15c2:	e4 e3       	ldi	r30, 0x34	; 52
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	8a 81       	ldd	r24, Y+2	; 0x02
    15c8:	80 83       	st	Z, r24
    15ca:	04 c0       	rjmp	.+8      	; 0x15d4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    15cc:	e1 e3       	ldi	r30, 0x31	; 49
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	8a 81       	ldd	r24, Y+2	; 0x02
    15d2:	80 83       	st	Z, r24
			break;
		}
	}
}
    15d4:	0f 90       	pop	r0
    15d6:	0f 90       	pop	r0
    15d8:	0f 90       	pop	r0
    15da:	0f 90       	pop	r0
    15dc:	cf 91       	pop	r28
    15de:	df 91       	pop	r29
    15e0:	08 95       	ret

000015e2 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    15e2:	df 93       	push	r29
    15e4:	cf 93       	push	r28
    15e6:	00 d0       	rcall	.+0      	; 0x15e8 <GPIO_writePort+0x6>
    15e8:	00 d0       	rcall	.+0      	; 0x15ea <GPIO_writePort+0x8>
    15ea:	cd b7       	in	r28, 0x3d	; 61
    15ec:	de b7       	in	r29, 0x3e	; 62
    15ee:	89 83       	std	Y+1, r24	; 0x01
    15f0:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num>=NUM_OF_PORTS)
    15f2:	89 81       	ldd	r24, Y+1	; 0x01
    15f4:	84 30       	cpi	r24, 0x04	; 4
    15f6:	90 f5       	brcc	.+100    	; 0x165c <GPIO_writePort+0x7a>
	{
			/*Do Nothing*/
	}
	else
	{
		switch(port_num)
    15f8:	89 81       	ldd	r24, Y+1	; 0x01
    15fa:	28 2f       	mov	r18, r24
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	3c 83       	std	Y+4, r19	; 0x04
    1600:	2b 83       	std	Y+3, r18	; 0x03
    1602:	8b 81       	ldd	r24, Y+3	; 0x03
    1604:	9c 81       	ldd	r25, Y+4	; 0x04
    1606:	81 30       	cpi	r24, 0x01	; 1
    1608:	91 05       	cpc	r25, r1
    160a:	d1 f0       	breq	.+52     	; 0x1640 <GPIO_writePort+0x5e>
    160c:	2b 81       	ldd	r18, Y+3	; 0x03
    160e:	3c 81       	ldd	r19, Y+4	; 0x04
    1610:	22 30       	cpi	r18, 0x02	; 2
    1612:	31 05       	cpc	r19, r1
    1614:	2c f4       	brge	.+10     	; 0x1620 <GPIO_writePort+0x3e>
    1616:	8b 81       	ldd	r24, Y+3	; 0x03
    1618:	9c 81       	ldd	r25, Y+4	; 0x04
    161a:	00 97       	sbiw	r24, 0x00	; 0
    161c:	61 f0       	breq	.+24     	; 0x1636 <GPIO_writePort+0x54>
    161e:	1e c0       	rjmp	.+60     	; 0x165c <GPIO_writePort+0x7a>
    1620:	2b 81       	ldd	r18, Y+3	; 0x03
    1622:	3c 81       	ldd	r19, Y+4	; 0x04
    1624:	22 30       	cpi	r18, 0x02	; 2
    1626:	31 05       	cpc	r19, r1
    1628:	81 f0       	breq	.+32     	; 0x164a <GPIO_writePort+0x68>
    162a:	8b 81       	ldd	r24, Y+3	; 0x03
    162c:	9c 81       	ldd	r25, Y+4	; 0x04
    162e:	83 30       	cpi	r24, 0x03	; 3
    1630:	91 05       	cpc	r25, r1
    1632:	81 f0       	breq	.+32     	; 0x1654 <GPIO_writePort+0x72>
    1634:	13 c0       	rjmp	.+38     	; 0x165c <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1636:	eb e3       	ldi	r30, 0x3B	; 59
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	8a 81       	ldd	r24, Y+2	; 0x02
    163c:	80 83       	st	Z, r24
    163e:	0e c0       	rjmp	.+28     	; 0x165c <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1640:	e8 e3       	ldi	r30, 0x38	; 56
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	8a 81       	ldd	r24, Y+2	; 0x02
    1646:	80 83       	st	Z, r24
    1648:	09 c0       	rjmp	.+18     	; 0x165c <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    164a:	e5 e3       	ldi	r30, 0x35	; 53
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	8a 81       	ldd	r24, Y+2	; 0x02
    1650:	80 83       	st	Z, r24
    1652:	04 c0       	rjmp	.+8      	; 0x165c <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1654:	e2 e3       	ldi	r30, 0x32	; 50
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	8a 81       	ldd	r24, Y+2	; 0x02
    165a:	80 83       	st	Z, r24
			break;
		}
	}
}
    165c:	0f 90       	pop	r0
    165e:	0f 90       	pop	r0
    1660:	0f 90       	pop	r0
    1662:	0f 90       	pop	r0
    1664:	cf 91       	pop	r28
    1666:	df 91       	pop	r29
    1668:	08 95       	ret

0000166a <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    166a:	df 93       	push	r29
    166c:	cf 93       	push	r28
    166e:	00 d0       	rcall	.+0      	; 0x1670 <GPIO_readPort+0x6>
    1670:	00 d0       	rcall	.+0      	; 0x1672 <GPIO_readPort+0x8>
    1672:	cd b7       	in	r28, 0x3d	; 61
    1674:	de b7       	in	r29, 0x3e	; 62
    1676:	8a 83       	std	Y+2, r24	; 0x02
	/* set the default of the value = Zero */
	uint8 value = LOGIC_LOW;
    1678:	19 82       	std	Y+1, r1	; 0x01
	if(port_num>=NUM_OF_PORTS)
    167a:	8a 81       	ldd	r24, Y+2	; 0x02
    167c:	84 30       	cpi	r24, 0x04	; 4
    167e:	90 f5       	brcc	.+100    	; 0x16e4 <GPIO_readPort+0x7a>
	{
			/*Do Nothing*/
	}
	else
	{
		switch(port_num)
    1680:	8a 81       	ldd	r24, Y+2	; 0x02
    1682:	28 2f       	mov	r18, r24
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	3c 83       	std	Y+4, r19	; 0x04
    1688:	2b 83       	std	Y+3, r18	; 0x03
    168a:	8b 81       	ldd	r24, Y+3	; 0x03
    168c:	9c 81       	ldd	r25, Y+4	; 0x04
    168e:	81 30       	cpi	r24, 0x01	; 1
    1690:	91 05       	cpc	r25, r1
    1692:	d1 f0       	breq	.+52     	; 0x16c8 <GPIO_readPort+0x5e>
    1694:	2b 81       	ldd	r18, Y+3	; 0x03
    1696:	3c 81       	ldd	r19, Y+4	; 0x04
    1698:	22 30       	cpi	r18, 0x02	; 2
    169a:	31 05       	cpc	r19, r1
    169c:	2c f4       	brge	.+10     	; 0x16a8 <GPIO_readPort+0x3e>
    169e:	8b 81       	ldd	r24, Y+3	; 0x03
    16a0:	9c 81       	ldd	r25, Y+4	; 0x04
    16a2:	00 97       	sbiw	r24, 0x00	; 0
    16a4:	61 f0       	breq	.+24     	; 0x16be <GPIO_readPort+0x54>
    16a6:	1e c0       	rjmp	.+60     	; 0x16e4 <GPIO_readPort+0x7a>
    16a8:	2b 81       	ldd	r18, Y+3	; 0x03
    16aa:	3c 81       	ldd	r19, Y+4	; 0x04
    16ac:	22 30       	cpi	r18, 0x02	; 2
    16ae:	31 05       	cpc	r19, r1
    16b0:	81 f0       	breq	.+32     	; 0x16d2 <GPIO_readPort+0x68>
    16b2:	8b 81       	ldd	r24, Y+3	; 0x03
    16b4:	9c 81       	ldd	r25, Y+4	; 0x04
    16b6:	83 30       	cpi	r24, 0x03	; 3
    16b8:	91 05       	cpc	r25, r1
    16ba:	81 f0       	breq	.+32     	; 0x16dc <GPIO_readPort+0x72>
    16bc:	13 c0       	rjmp	.+38     	; 0x16e4 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    16be:	e9 e3       	ldi	r30, 0x39	; 57
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	89 83       	std	Y+1, r24	; 0x01
    16c6:	0e c0       	rjmp	.+28     	; 0x16e4 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    16c8:	e6 e3       	ldi	r30, 0x36	; 54
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	89 83       	std	Y+1, r24	; 0x01
    16d0:	09 c0       	rjmp	.+18     	; 0x16e4 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    16d2:	e3 e3       	ldi	r30, 0x33	; 51
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	80 81       	ld	r24, Z
    16d8:	89 83       	std	Y+1, r24	; 0x01
    16da:	04 c0       	rjmp	.+8      	; 0x16e4 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    16dc:	e0 e3       	ldi	r30, 0x30	; 48
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return value;
    16e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    16e6:	0f 90       	pop	r0
    16e8:	0f 90       	pop	r0
    16ea:	0f 90       	pop	r0
    16ec:	0f 90       	pop	r0
    16ee:	cf 91       	pop	r28
    16f0:	df 91       	pop	r29
    16f2:	08 95       	ret

000016f4 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    16f4:	df 93       	push	r29
    16f6:	cf 93       	push	r28
    16f8:	cd b7       	in	r28, 0x3d	; 61
    16fa:	de b7       	in	r29, 0x3e	; 62
    16fc:	60 97       	sbiw	r28, 0x10	; 16
    16fe:	0f b6       	in	r0, 0x3f	; 63
    1700:	f8 94       	cli
    1702:	de bf       	out	0x3e, r29	; 62
    1704:	0f be       	out	0x3f, r0	; 63
    1706:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1708:	80 e0       	ldi	r24, 0x00	; 0
    170a:	63 e0       	ldi	r22, 0x03	; 3
    170c:	40 e0       	ldi	r20, 0x00	; 0
    170e:	0e 94 44 08 	call	0x1088	; 0x1088 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1712:	80 e0       	ldi	r24, 0x00	; 0
    1714:	64 e0       	ldi	r22, 0x04	; 4
    1716:	40 e0       	ldi	r20, 0x00	; 0
    1718:	0e 94 44 08 	call	0x1088	; 0x1088 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    171c:	80 e0       	ldi	r24, 0x00	; 0
    171e:	65 e0       	ldi	r22, 0x05	; 5
    1720:	40 e0       	ldi	r20, 0x00	; 0
    1722:	0e 94 44 08 	call	0x1088	; 0x1088 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1726:	80 e0       	ldi	r24, 0x00	; 0
    1728:	66 e0       	ldi	r22, 0x06	; 6
    172a:	40 e0       	ldi	r20, 0x00	; 0
    172c:	0e 94 44 08 	call	0x1088	; 0x1088 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1730:	82 e0       	ldi	r24, 0x02	; 2
    1732:	60 e0       	ldi	r22, 0x00	; 0
    1734:	40 e0       	ldi	r20, 0x00	; 0
    1736:	0e 94 44 08 	call	0x1088	; 0x1088 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    173a:	82 e0       	ldi	r24, 0x02	; 2
    173c:	61 e0       	ldi	r22, 0x01	; 1
    173e:	40 e0       	ldi	r20, 0x00	; 0
    1740:	0e 94 44 08 	call	0x1088	; 0x1088 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1744:	82 e0       	ldi	r24, 0x02	; 2
    1746:	62 e0       	ldi	r22, 0x02	; 2
    1748:	40 e0       	ldi	r20, 0x00	; 0
    174a:	0e 94 44 08 	call	0x1088	; 0x1088 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    174e:	82 e0       	ldi	r24, 0x02	; 2
    1750:	63 e0       	ldi	r22, 0x03	; 3
    1752:	40 e0       	ldi	r20, 0x00	; 0
    1754:	0e 94 44 08 	call	0x1088	; 0x1088 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1758:	1f 86       	std	Y+15, r1	; 0x0f
    175a:	b1 c0       	rjmp	.+354    	; 0x18be <KEYPAD_getPressedKey+0x1ca>
		{
			/*
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    175c:	8f 85       	ldd	r24, Y+15	; 0x0f
    175e:	98 2f       	mov	r25, r24
    1760:	9d 5f       	subi	r25, 0xFD	; 253
    1762:	80 e0       	ldi	r24, 0x00	; 0
    1764:	69 2f       	mov	r22, r25
    1766:	41 e0       	ldi	r20, 0x01	; 1
    1768:	0e 94 44 08 	call	0x1088	; 0x1088 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    176c:	8f 85       	ldd	r24, Y+15	; 0x0f
    176e:	98 2f       	mov	r25, r24
    1770:	9d 5f       	subi	r25, 0xFD	; 253
    1772:	80 e0       	ldi	r24, 0x00	; 0
    1774:	69 2f       	mov	r22, r25
    1776:	40 e0       	ldi	r20, 0x00	; 0
    1778:	0e 94 2f 09 	call	0x125e	; 0x125e <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    177c:	18 8a       	std	Y+16, r1	; 0x10
    177e:	1f c0       	rjmp	.+62     	; 0x17be <KEYPAD_getPressedKey+0xca>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1780:	82 e0       	ldi	r24, 0x02	; 2
    1782:	68 89       	ldd	r22, Y+16	; 0x10
    1784:	0e 94 1a 0a 	call	0x1434	; 0x1434 <GPIO_readPin>
    1788:	88 23       	and	r24, r24
    178a:	b1 f4       	brne	.+44     	; 0x17b8 <KEYPAD_getPressedKey+0xc4>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    178c:	8f 85       	ldd	r24, Y+15	; 0x0f
    178e:	88 2f       	mov	r24, r24
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	88 0f       	add	r24, r24
    1794:	99 1f       	adc	r25, r25
    1796:	88 0f       	add	r24, r24
    1798:	99 1f       	adc	r25, r25
    179a:	98 2f       	mov	r25, r24
    179c:	88 89       	ldd	r24, Y+16	; 0x10
    179e:	89 0f       	add	r24, r25
    17a0:	8f 5f       	subi	r24, 0xFF	; 255
    17a2:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}
}
    17a6:	60 96       	adiw	r28, 0x10	; 16
    17a8:	0f b6       	in	r0, 0x3f	; 63
    17aa:	f8 94       	cli
    17ac:	de bf       	out	0x3e, r29	; 62
    17ae:	0f be       	out	0x3f, r0	; 63
    17b0:	cd bf       	out	0x3d, r28	; 61
    17b2:	cf 91       	pop	r28
    17b4:	df 91       	pop	r29
    17b6:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    17b8:	88 89       	ldd	r24, Y+16	; 0x10
    17ba:	8f 5f       	subi	r24, 0xFF	; 255
    17bc:	88 8b       	std	Y+16, r24	; 0x10
    17be:	88 89       	ldd	r24, Y+16	; 0x10
    17c0:	84 30       	cpi	r24, 0x04	; 4
    17c2:	f0 f2       	brcs	.-68     	; 0x1780 <KEYPAD_getPressedKey+0x8c>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    17c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    17c6:	98 2f       	mov	r25, r24
    17c8:	9d 5f       	subi	r25, 0xFD	; 253
    17ca:	80 e0       	ldi	r24, 0x00	; 0
    17cc:	69 2f       	mov	r22, r25
    17ce:	40 e0       	ldi	r20, 0x00	; 0
    17d0:	0e 94 44 08 	call	0x1088	; 0x1088 <GPIO_setupPinDirection>
    17d4:	80 e0       	ldi	r24, 0x00	; 0
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	a0 ea       	ldi	r26, 0xA0	; 160
    17da:	b0 e4       	ldi	r27, 0x40	; 64
    17dc:	8b 87       	std	Y+11, r24	; 0x0b
    17de:	9c 87       	std	Y+12, r25	; 0x0c
    17e0:	ad 87       	std	Y+13, r26	; 0x0d
    17e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    17e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    17e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    17ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    17ec:	20 e0       	ldi	r18, 0x00	; 0
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	4a e7       	ldi	r20, 0x7A	; 122
    17f2:	53 e4       	ldi	r21, 0x43	; 67
    17f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17f8:	dc 01       	movw	r26, r24
    17fa:	cb 01       	movw	r24, r22
    17fc:	8f 83       	std	Y+7, r24	; 0x07
    17fe:	98 87       	std	Y+8, r25	; 0x08
    1800:	a9 87       	std	Y+9, r26	; 0x09
    1802:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1804:	6f 81       	ldd	r22, Y+7	; 0x07
    1806:	78 85       	ldd	r23, Y+8	; 0x08
    1808:	89 85       	ldd	r24, Y+9	; 0x09
    180a:	9a 85       	ldd	r25, Y+10	; 0x0a
    180c:	20 e0       	ldi	r18, 0x00	; 0
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	40 e8       	ldi	r20, 0x80	; 128
    1812:	5f e3       	ldi	r21, 0x3F	; 63
    1814:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1818:	88 23       	and	r24, r24
    181a:	2c f4       	brge	.+10     	; 0x1826 <KEYPAD_getPressedKey+0x132>
		__ticks = 1;
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	9e 83       	std	Y+6, r25	; 0x06
    1822:	8d 83       	std	Y+5, r24	; 0x05
    1824:	3f c0       	rjmp	.+126    	; 0x18a4 <KEYPAD_getPressedKey+0x1b0>
	else if (__tmp > 65535)
    1826:	6f 81       	ldd	r22, Y+7	; 0x07
    1828:	78 85       	ldd	r23, Y+8	; 0x08
    182a:	89 85       	ldd	r24, Y+9	; 0x09
    182c:	9a 85       	ldd	r25, Y+10	; 0x0a
    182e:	20 e0       	ldi	r18, 0x00	; 0
    1830:	3f ef       	ldi	r19, 0xFF	; 255
    1832:	4f e7       	ldi	r20, 0x7F	; 127
    1834:	57 e4       	ldi	r21, 0x47	; 71
    1836:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    183a:	18 16       	cp	r1, r24
    183c:	4c f5       	brge	.+82     	; 0x1890 <KEYPAD_getPressedKey+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    183e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1840:	7c 85       	ldd	r23, Y+12	; 0x0c
    1842:	8d 85       	ldd	r24, Y+13	; 0x0d
    1844:	9e 85       	ldd	r25, Y+14	; 0x0e
    1846:	20 e0       	ldi	r18, 0x00	; 0
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	40 e2       	ldi	r20, 0x20	; 32
    184c:	51 e4       	ldi	r21, 0x41	; 65
    184e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1852:	dc 01       	movw	r26, r24
    1854:	cb 01       	movw	r24, r22
    1856:	bc 01       	movw	r22, r24
    1858:	cd 01       	movw	r24, r26
    185a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    185e:	dc 01       	movw	r26, r24
    1860:	cb 01       	movw	r24, r22
    1862:	9e 83       	std	Y+6, r25	; 0x06
    1864:	8d 83       	std	Y+5, r24	; 0x05
    1866:	0f c0       	rjmp	.+30     	; 0x1886 <KEYPAD_getPressedKey+0x192>
    1868:	89 e1       	ldi	r24, 0x19	; 25
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	9c 83       	std	Y+4, r25	; 0x04
    186e:	8b 83       	std	Y+3, r24	; 0x03
    1870:	8b 81       	ldd	r24, Y+3	; 0x03
    1872:	9c 81       	ldd	r25, Y+4	; 0x04
    1874:	01 97       	sbiw	r24, 0x01	; 1
    1876:	f1 f7       	brne	.-4      	; 0x1874 <KEYPAD_getPressedKey+0x180>
    1878:	9c 83       	std	Y+4, r25	; 0x04
    187a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    187c:	8d 81       	ldd	r24, Y+5	; 0x05
    187e:	9e 81       	ldd	r25, Y+6	; 0x06
    1880:	01 97       	sbiw	r24, 0x01	; 1
    1882:	9e 83       	std	Y+6, r25	; 0x06
    1884:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1886:	8d 81       	ldd	r24, Y+5	; 0x05
    1888:	9e 81       	ldd	r25, Y+6	; 0x06
    188a:	00 97       	sbiw	r24, 0x00	; 0
    188c:	69 f7       	brne	.-38     	; 0x1868 <KEYPAD_getPressedKey+0x174>
    188e:	14 c0       	rjmp	.+40     	; 0x18b8 <KEYPAD_getPressedKey+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1890:	6f 81       	ldd	r22, Y+7	; 0x07
    1892:	78 85       	ldd	r23, Y+8	; 0x08
    1894:	89 85       	ldd	r24, Y+9	; 0x09
    1896:	9a 85       	ldd	r25, Y+10	; 0x0a
    1898:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    189c:	dc 01       	movw	r26, r24
    189e:	cb 01       	movw	r24, r22
    18a0:	9e 83       	std	Y+6, r25	; 0x06
    18a2:	8d 83       	std	Y+5, r24	; 0x05
    18a4:	8d 81       	ldd	r24, Y+5	; 0x05
    18a6:	9e 81       	ldd	r25, Y+6	; 0x06
    18a8:	9a 83       	std	Y+2, r25	; 0x02
    18aa:	89 83       	std	Y+1, r24	; 0x01
    18ac:	89 81       	ldd	r24, Y+1	; 0x01
    18ae:	9a 81       	ldd	r25, Y+2	; 0x02
    18b0:	01 97       	sbiw	r24, 0x01	; 1
    18b2:	f1 f7       	brne	.-4      	; 0x18b0 <KEYPAD_getPressedKey+0x1bc>
    18b4:	9a 83       	std	Y+2, r25	; 0x02
    18b6:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    18b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    18ba:	8f 5f       	subi	r24, 0xFF	; 255
    18bc:	8f 87       	std	Y+15, r24	; 0x0f
    18be:	8f 85       	ldd	r24, Y+15	; 0x0f
    18c0:	84 30       	cpi	r24, 0x04	; 4
    18c2:	08 f4       	brcc	.+2      	; 0x18c6 <KEYPAD_getPressedKey+0x1d2>
    18c4:	4b cf       	rjmp	.-362    	; 0x175c <KEYPAD_getPressedKey+0x68>
    18c6:	48 cf       	rjmp	.-368    	; 0x1758 <KEYPAD_getPressedKey+0x64>

000018c8 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    18c8:	df 93       	push	r29
    18ca:	cf 93       	push	r28
    18cc:	00 d0       	rcall	.+0      	; 0x18ce <KEYPAD_4x4_adjustKeyNumber+0x6>
    18ce:	00 d0       	rcall	.+0      	; 0x18d0 <KEYPAD_4x4_adjustKeyNumber+0x8>
    18d0:	cd b7       	in	r28, 0x3d	; 61
    18d2:	de b7       	in	r29, 0x3e	; 62
    18d4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    18d6:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    18d8:	8a 81       	ldd	r24, Y+2	; 0x02
    18da:	28 2f       	mov	r18, r24
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	3c 83       	std	Y+4, r19	; 0x04
    18e0:	2b 83       	std	Y+3, r18	; 0x03
    18e2:	8b 81       	ldd	r24, Y+3	; 0x03
    18e4:	9c 81       	ldd	r25, Y+4	; 0x04
    18e6:	88 30       	cpi	r24, 0x08	; 8
    18e8:	91 05       	cpc	r25, r1
    18ea:	09 f4       	brne	.+2      	; 0x18ee <KEYPAD_4x4_adjustKeyNumber+0x26>
    18ec:	70 c0       	rjmp	.+224    	; 0x19ce <KEYPAD_4x4_adjustKeyNumber+0x106>
    18ee:	2b 81       	ldd	r18, Y+3	; 0x03
    18f0:	3c 81       	ldd	r19, Y+4	; 0x04
    18f2:	29 30       	cpi	r18, 0x09	; 9
    18f4:	31 05       	cpc	r19, r1
    18f6:	5c f5       	brge	.+86     	; 0x194e <KEYPAD_4x4_adjustKeyNumber+0x86>
    18f8:	8b 81       	ldd	r24, Y+3	; 0x03
    18fa:	9c 81       	ldd	r25, Y+4	; 0x04
    18fc:	84 30       	cpi	r24, 0x04	; 4
    18fe:	91 05       	cpc	r25, r1
    1900:	09 f4       	brne	.+2      	; 0x1904 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1902:	59 c0       	rjmp	.+178    	; 0x19b6 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1904:	2b 81       	ldd	r18, Y+3	; 0x03
    1906:	3c 81       	ldd	r19, Y+4	; 0x04
    1908:	25 30       	cpi	r18, 0x05	; 5
    190a:	31 05       	cpc	r19, r1
    190c:	9c f4       	brge	.+38     	; 0x1934 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    190e:	8b 81       	ldd	r24, Y+3	; 0x03
    1910:	9c 81       	ldd	r25, Y+4	; 0x04
    1912:	82 30       	cpi	r24, 0x02	; 2
    1914:	91 05       	cpc	r25, r1
    1916:	09 f4       	brne	.+2      	; 0x191a <KEYPAD_4x4_adjustKeyNumber+0x52>
    1918:	48 c0       	rjmp	.+144    	; 0x19aa <KEYPAD_4x4_adjustKeyNumber+0xe2>
    191a:	2b 81       	ldd	r18, Y+3	; 0x03
    191c:	3c 81       	ldd	r19, Y+4	; 0x04
    191e:	23 30       	cpi	r18, 0x03	; 3
    1920:	31 05       	cpc	r19, r1
    1922:	0c f0       	brlt	.+2      	; 0x1926 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1924:	45 c0       	rjmp	.+138    	; 0x19b0 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1926:	8b 81       	ldd	r24, Y+3	; 0x03
    1928:	9c 81       	ldd	r25, Y+4	; 0x04
    192a:	81 30       	cpi	r24, 0x01	; 1
    192c:	91 05       	cpc	r25, r1
    192e:	09 f4       	brne	.+2      	; 0x1932 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1930:	39 c0       	rjmp	.+114    	; 0x19a4 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1932:	67 c0       	rjmp	.+206    	; 0x1a02 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1934:	2b 81       	ldd	r18, Y+3	; 0x03
    1936:	3c 81       	ldd	r19, Y+4	; 0x04
    1938:	26 30       	cpi	r18, 0x06	; 6
    193a:	31 05       	cpc	r19, r1
    193c:	09 f4       	brne	.+2      	; 0x1940 <KEYPAD_4x4_adjustKeyNumber+0x78>
    193e:	41 c0       	rjmp	.+130    	; 0x19c2 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1940:	8b 81       	ldd	r24, Y+3	; 0x03
    1942:	9c 81       	ldd	r25, Y+4	; 0x04
    1944:	87 30       	cpi	r24, 0x07	; 7
    1946:	91 05       	cpc	r25, r1
    1948:	0c f0       	brlt	.+2      	; 0x194c <KEYPAD_4x4_adjustKeyNumber+0x84>
    194a:	3e c0       	rjmp	.+124    	; 0x19c8 <KEYPAD_4x4_adjustKeyNumber+0x100>
    194c:	37 c0       	rjmp	.+110    	; 0x19bc <KEYPAD_4x4_adjustKeyNumber+0xf4>
    194e:	2b 81       	ldd	r18, Y+3	; 0x03
    1950:	3c 81       	ldd	r19, Y+4	; 0x04
    1952:	2c 30       	cpi	r18, 0x0C	; 12
    1954:	31 05       	cpc	r19, r1
    1956:	09 f4       	brne	.+2      	; 0x195a <KEYPAD_4x4_adjustKeyNumber+0x92>
    1958:	46 c0       	rjmp	.+140    	; 0x19e6 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    195a:	8b 81       	ldd	r24, Y+3	; 0x03
    195c:	9c 81       	ldd	r25, Y+4	; 0x04
    195e:	8d 30       	cpi	r24, 0x0D	; 13
    1960:	91 05       	cpc	r25, r1
    1962:	5c f4       	brge	.+22     	; 0x197a <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1964:	2b 81       	ldd	r18, Y+3	; 0x03
    1966:	3c 81       	ldd	r19, Y+4	; 0x04
    1968:	2a 30       	cpi	r18, 0x0A	; 10
    196a:	31 05       	cpc	r19, r1
    196c:	b1 f1       	breq	.+108    	; 0x19da <KEYPAD_4x4_adjustKeyNumber+0x112>
    196e:	8b 81       	ldd	r24, Y+3	; 0x03
    1970:	9c 81       	ldd	r25, Y+4	; 0x04
    1972:	8b 30       	cpi	r24, 0x0B	; 11
    1974:	91 05       	cpc	r25, r1
    1976:	a4 f5       	brge	.+104    	; 0x19e0 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1978:	2d c0       	rjmp	.+90     	; 0x19d4 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    197a:	2b 81       	ldd	r18, Y+3	; 0x03
    197c:	3c 81       	ldd	r19, Y+4	; 0x04
    197e:	2e 30       	cpi	r18, 0x0E	; 14
    1980:	31 05       	cpc	r19, r1
    1982:	b9 f1       	breq	.+110    	; 0x19f2 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1984:	8b 81       	ldd	r24, Y+3	; 0x03
    1986:	9c 81       	ldd	r25, Y+4	; 0x04
    1988:	8e 30       	cpi	r24, 0x0E	; 14
    198a:	91 05       	cpc	r25, r1
    198c:	7c f1       	brlt	.+94     	; 0x19ec <KEYPAD_4x4_adjustKeyNumber+0x124>
    198e:	2b 81       	ldd	r18, Y+3	; 0x03
    1990:	3c 81       	ldd	r19, Y+4	; 0x04
    1992:	2f 30       	cpi	r18, 0x0F	; 15
    1994:	31 05       	cpc	r19, r1
    1996:	79 f1       	breq	.+94     	; 0x19f6 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1998:	8b 81       	ldd	r24, Y+3	; 0x03
    199a:	9c 81       	ldd	r25, Y+4	; 0x04
    199c:	80 31       	cpi	r24, 0x10	; 16
    199e:	91 05       	cpc	r25, r1
    19a0:	69 f1       	breq	.+90     	; 0x19fc <KEYPAD_4x4_adjustKeyNumber+0x134>
    19a2:	2f c0       	rjmp	.+94     	; 0x1a02 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    19a4:	87 e0       	ldi	r24, 0x07	; 7
    19a6:	89 83       	std	Y+1, r24	; 0x01
    19a8:	2e c0       	rjmp	.+92     	; 0x1a06 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    19aa:	88 e0       	ldi	r24, 0x08	; 8
    19ac:	89 83       	std	Y+1, r24	; 0x01
    19ae:	2b c0       	rjmp	.+86     	; 0x1a06 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    19b0:	89 e0       	ldi	r24, 0x09	; 9
    19b2:	89 83       	std	Y+1, r24	; 0x01
    19b4:	28 c0       	rjmp	.+80     	; 0x1a06 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    19b6:	85 e2       	ldi	r24, 0x25	; 37
    19b8:	89 83       	std	Y+1, r24	; 0x01
    19ba:	25 c0       	rjmp	.+74     	; 0x1a06 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    19bc:	84 e0       	ldi	r24, 0x04	; 4
    19be:	89 83       	std	Y+1, r24	; 0x01
    19c0:	22 c0       	rjmp	.+68     	; 0x1a06 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    19c2:	85 e0       	ldi	r24, 0x05	; 5
    19c4:	89 83       	std	Y+1, r24	; 0x01
    19c6:	1f c0       	rjmp	.+62     	; 0x1a06 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    19c8:	86 e0       	ldi	r24, 0x06	; 6
    19ca:	89 83       	std	Y+1, r24	; 0x01
    19cc:	1c c0       	rjmp	.+56     	; 0x1a06 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    19ce:	8a e2       	ldi	r24, 0x2A	; 42
    19d0:	89 83       	std	Y+1, r24	; 0x01
    19d2:	19 c0       	rjmp	.+50     	; 0x1a06 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	89 83       	std	Y+1, r24	; 0x01
    19d8:	16 c0       	rjmp	.+44     	; 0x1a06 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    19da:	82 e0       	ldi	r24, 0x02	; 2
    19dc:	89 83       	std	Y+1, r24	; 0x01
    19de:	13 c0       	rjmp	.+38     	; 0x1a06 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    19e0:	83 e0       	ldi	r24, 0x03	; 3
    19e2:	89 83       	std	Y+1, r24	; 0x01
    19e4:	10 c0       	rjmp	.+32     	; 0x1a06 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    19e6:	8d e2       	ldi	r24, 0x2D	; 45
    19e8:	89 83       	std	Y+1, r24	; 0x01
    19ea:	0d c0       	rjmp	.+26     	; 0x1a06 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    19ec:	8d e0       	ldi	r24, 0x0D	; 13
    19ee:	89 83       	std	Y+1, r24	; 0x01
    19f0:	0a c0       	rjmp	.+20     	; 0x1a06 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    19f2:	19 82       	std	Y+1, r1	; 0x01
    19f4:	08 c0       	rjmp	.+16     	; 0x1a06 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    19f6:	8d e3       	ldi	r24, 0x3D	; 61
    19f8:	89 83       	std	Y+1, r24	; 0x01
    19fa:	05 c0       	rjmp	.+10     	; 0x1a06 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    19fc:	8b e2       	ldi	r24, 0x2B	; 43
    19fe:	89 83       	std	Y+1, r24	; 0x01
    1a00:	02 c0       	rjmp	.+4      	; 0x1a06 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1a02:	8a 81       	ldd	r24, Y+2	; 0x02
    1a04:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1a06:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a08:	0f 90       	pop	r0
    1a0a:	0f 90       	pop	r0
    1a0c:	0f 90       	pop	r0
    1a0e:	0f 90       	pop	r0
    1a10:	cf 91       	pop	r28
    1a12:	df 91       	pop	r29
    1a14:	08 95       	ret

00001a16 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1a16:	df 93       	push	r29
    1a18:	cf 93       	push	r28
    1a1a:	cd b7       	in	r28, 0x3d	; 61
    1a1c:	de b7       	in	r29, 0x3e	; 62
    1a1e:	2e 97       	sbiw	r28, 0x0e	; 14
    1a20:	0f b6       	in	r0, 0x3f	; 63
    1a22:	f8 94       	cli
    1a24:	de bf       	out	0x3e, r29	; 62
    1a26:	0f be       	out	0x3f, r0	; 63
    1a28:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1a2a:	80 e0       	ldi	r24, 0x00	; 0
    1a2c:	61 e0       	ldi	r22, 0x01	; 1
    1a2e:	41 e0       	ldi	r20, 0x01	; 1
    1a30:	0e 94 44 08 	call	0x1088	; 0x1088 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1a34:	80 e0       	ldi	r24, 0x00	; 0
    1a36:	62 e0       	ldi	r22, 0x02	; 2
    1a38:	41 e0       	ldi	r20, 0x01	; 1
    1a3a:	0e 94 44 08 	call	0x1088	; 0x1088 <GPIO_setupPinDirection>
    1a3e:	80 e0       	ldi	r24, 0x00	; 0
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	a0 ea       	ldi	r26, 0xA0	; 160
    1a44:	b1 e4       	ldi	r27, 0x41	; 65
    1a46:	8b 87       	std	Y+11, r24	; 0x0b
    1a48:	9c 87       	std	Y+12, r25	; 0x0c
    1a4a:	ad 87       	std	Y+13, r26	; 0x0d
    1a4c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a50:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a52:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a54:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a56:	20 e0       	ldi	r18, 0x00	; 0
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	4a e7       	ldi	r20, 0x7A	; 122
    1a5c:	53 e4       	ldi	r21, 0x43	; 67
    1a5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a62:	dc 01       	movw	r26, r24
    1a64:	cb 01       	movw	r24, r22
    1a66:	8f 83       	std	Y+7, r24	; 0x07
    1a68:	98 87       	std	Y+8, r25	; 0x08
    1a6a:	a9 87       	std	Y+9, r26	; 0x09
    1a6c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a6e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a70:	78 85       	ldd	r23, Y+8	; 0x08
    1a72:	89 85       	ldd	r24, Y+9	; 0x09
    1a74:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a76:	20 e0       	ldi	r18, 0x00	; 0
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	40 e8       	ldi	r20, 0x80	; 128
    1a7c:	5f e3       	ldi	r21, 0x3F	; 63
    1a7e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a82:	88 23       	and	r24, r24
    1a84:	2c f4       	brge	.+10     	; 0x1a90 <LCD_init+0x7a>
		__ticks = 1;
    1a86:	81 e0       	ldi	r24, 0x01	; 1
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	9e 83       	std	Y+6, r25	; 0x06
    1a8c:	8d 83       	std	Y+5, r24	; 0x05
    1a8e:	3f c0       	rjmp	.+126    	; 0x1b0e <LCD_init+0xf8>
	else if (__tmp > 65535)
    1a90:	6f 81       	ldd	r22, Y+7	; 0x07
    1a92:	78 85       	ldd	r23, Y+8	; 0x08
    1a94:	89 85       	ldd	r24, Y+9	; 0x09
    1a96:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a98:	20 e0       	ldi	r18, 0x00	; 0
    1a9a:	3f ef       	ldi	r19, 0xFF	; 255
    1a9c:	4f e7       	ldi	r20, 0x7F	; 127
    1a9e:	57 e4       	ldi	r21, 0x47	; 71
    1aa0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1aa4:	18 16       	cp	r1, r24
    1aa6:	4c f5       	brge	.+82     	; 0x1afa <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aa8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aaa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aac:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aae:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ab0:	20 e0       	ldi	r18, 0x00	; 0
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	40 e2       	ldi	r20, 0x20	; 32
    1ab6:	51 e4       	ldi	r21, 0x41	; 65
    1ab8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1abc:	dc 01       	movw	r26, r24
    1abe:	cb 01       	movw	r24, r22
    1ac0:	bc 01       	movw	r22, r24
    1ac2:	cd 01       	movw	r24, r26
    1ac4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ac8:	dc 01       	movw	r26, r24
    1aca:	cb 01       	movw	r24, r22
    1acc:	9e 83       	std	Y+6, r25	; 0x06
    1ace:	8d 83       	std	Y+5, r24	; 0x05
    1ad0:	0f c0       	rjmp	.+30     	; 0x1af0 <LCD_init+0xda>
    1ad2:	89 e1       	ldi	r24, 0x19	; 25
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	9c 83       	std	Y+4, r25	; 0x04
    1ad8:	8b 83       	std	Y+3, r24	; 0x03
    1ada:	8b 81       	ldd	r24, Y+3	; 0x03
    1adc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ade:	01 97       	sbiw	r24, 0x01	; 1
    1ae0:	f1 f7       	brne	.-4      	; 0x1ade <LCD_init+0xc8>
    1ae2:	9c 83       	std	Y+4, r25	; 0x04
    1ae4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ae6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae8:	9e 81       	ldd	r25, Y+6	; 0x06
    1aea:	01 97       	sbiw	r24, 0x01	; 1
    1aec:	9e 83       	std	Y+6, r25	; 0x06
    1aee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1af0:	8d 81       	ldd	r24, Y+5	; 0x05
    1af2:	9e 81       	ldd	r25, Y+6	; 0x06
    1af4:	00 97       	sbiw	r24, 0x00	; 0
    1af6:	69 f7       	brne	.-38     	; 0x1ad2 <LCD_init+0xbc>
    1af8:	14 c0       	rjmp	.+40     	; 0x1b22 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1afa:	6f 81       	ldd	r22, Y+7	; 0x07
    1afc:	78 85       	ldd	r23, Y+8	; 0x08
    1afe:	89 85       	ldd	r24, Y+9	; 0x09
    1b00:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b06:	dc 01       	movw	r26, r24
    1b08:	cb 01       	movw	r24, r22
    1b0a:	9e 83       	std	Y+6, r25	; 0x06
    1b0c:	8d 83       	std	Y+5, r24	; 0x05
    1b0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b10:	9e 81       	ldd	r25, Y+6	; 0x06
    1b12:	9a 83       	std	Y+2, r25	; 0x02
    1b14:	89 83       	std	Y+1, r24	; 0x01
    1b16:	89 81       	ldd	r24, Y+1	; 0x01
    1b18:	9a 81       	ldd	r25, Y+2	; 0x02
    1b1a:	01 97       	sbiw	r24, 0x01	; 1
    1b1c:	f1 f7       	brne	.-4      	; 0x1b1a <LCD_init+0x104>
    1b1e:	9a 83       	std	Y+2, r25	; 0x02
    1b20:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1b22:	81 e0       	ldi	r24, 0x01	; 1
    1b24:	6f ef       	ldi	r22, 0xFF	; 255
    1b26:	0e 94 ad 0a 	call	0x155a	; 0x155a <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1b2a:	88 e3       	ldi	r24, 0x38	; 56
    1b2c:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1b30:	8c e0       	ldi	r24, 0x0C	; 12
    1b32:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1b36:	81 e0       	ldi	r24, 0x01	; 1
    1b38:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <LCD_sendCommand>
}
    1b3c:	2e 96       	adiw	r28, 0x0e	; 14
    1b3e:	0f b6       	in	r0, 0x3f	; 63
    1b40:	f8 94       	cli
    1b42:	de bf       	out	0x3e, r29	; 62
    1b44:	0f be       	out	0x3f, r0	; 63
    1b46:	cd bf       	out	0x3d, r28	; 61
    1b48:	cf 91       	pop	r28
    1b4a:	df 91       	pop	r29
    1b4c:	08 95       	ret

00001b4e <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1b4e:	df 93       	push	r29
    1b50:	cf 93       	push	r28
    1b52:	cd b7       	in	r28, 0x3d	; 61
    1b54:	de b7       	in	r29, 0x3e	; 62
    1b56:	e9 97       	sbiw	r28, 0x39	; 57
    1b58:	0f b6       	in	r0, 0x3f	; 63
    1b5a:	f8 94       	cli
    1b5c:	de bf       	out	0x3e, r29	; 62
    1b5e:	0f be       	out	0x3f, r0	; 63
    1b60:	cd bf       	out	0x3d, r28	; 61
    1b62:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1b64:	80 e0       	ldi	r24, 0x00	; 0
    1b66:	61 e0       	ldi	r22, 0x01	; 1
    1b68:	40 e0       	ldi	r20, 0x00	; 0
    1b6a:	0e 94 2f 09 	call	0x125e	; 0x125e <GPIO_writePin>
    1b6e:	80 e0       	ldi	r24, 0x00	; 0
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	a0 e8       	ldi	r26, 0x80	; 128
    1b74:	bf e3       	ldi	r27, 0x3F	; 63
    1b76:	8d ab       	std	Y+53, r24	; 0x35
    1b78:	9e ab       	std	Y+54, r25	; 0x36
    1b7a:	af ab       	std	Y+55, r26	; 0x37
    1b7c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b7e:	6d a9       	ldd	r22, Y+53	; 0x35
    1b80:	7e a9       	ldd	r23, Y+54	; 0x36
    1b82:	8f a9       	ldd	r24, Y+55	; 0x37
    1b84:	98 ad       	ldd	r25, Y+56	; 0x38
    1b86:	20 e0       	ldi	r18, 0x00	; 0
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	4a e7       	ldi	r20, 0x7A	; 122
    1b8c:	53 e4       	ldi	r21, 0x43	; 67
    1b8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b92:	dc 01       	movw	r26, r24
    1b94:	cb 01       	movw	r24, r22
    1b96:	89 ab       	std	Y+49, r24	; 0x31
    1b98:	9a ab       	std	Y+50, r25	; 0x32
    1b9a:	ab ab       	std	Y+51, r26	; 0x33
    1b9c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b9e:	69 a9       	ldd	r22, Y+49	; 0x31
    1ba0:	7a a9       	ldd	r23, Y+50	; 0x32
    1ba2:	8b a9       	ldd	r24, Y+51	; 0x33
    1ba4:	9c a9       	ldd	r25, Y+52	; 0x34
    1ba6:	20 e0       	ldi	r18, 0x00	; 0
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	40 e8       	ldi	r20, 0x80	; 128
    1bac:	5f e3       	ldi	r21, 0x3F	; 63
    1bae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bb2:	88 23       	and	r24, r24
    1bb4:	2c f4       	brge	.+10     	; 0x1bc0 <LCD_sendCommand+0x72>
		__ticks = 1;
    1bb6:	81 e0       	ldi	r24, 0x01	; 1
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	98 ab       	std	Y+48, r25	; 0x30
    1bbc:	8f a7       	std	Y+47, r24	; 0x2f
    1bbe:	3f c0       	rjmp	.+126    	; 0x1c3e <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1bc0:	69 a9       	ldd	r22, Y+49	; 0x31
    1bc2:	7a a9       	ldd	r23, Y+50	; 0x32
    1bc4:	8b a9       	ldd	r24, Y+51	; 0x33
    1bc6:	9c a9       	ldd	r25, Y+52	; 0x34
    1bc8:	20 e0       	ldi	r18, 0x00	; 0
    1bca:	3f ef       	ldi	r19, 0xFF	; 255
    1bcc:	4f e7       	ldi	r20, 0x7F	; 127
    1bce:	57 e4       	ldi	r21, 0x47	; 71
    1bd0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bd4:	18 16       	cp	r1, r24
    1bd6:	4c f5       	brge	.+82     	; 0x1c2a <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bd8:	6d a9       	ldd	r22, Y+53	; 0x35
    1bda:	7e a9       	ldd	r23, Y+54	; 0x36
    1bdc:	8f a9       	ldd	r24, Y+55	; 0x37
    1bde:	98 ad       	ldd	r25, Y+56	; 0x38
    1be0:	20 e0       	ldi	r18, 0x00	; 0
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	40 e2       	ldi	r20, 0x20	; 32
    1be6:	51 e4       	ldi	r21, 0x41	; 65
    1be8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bec:	dc 01       	movw	r26, r24
    1bee:	cb 01       	movw	r24, r22
    1bf0:	bc 01       	movw	r22, r24
    1bf2:	cd 01       	movw	r24, r26
    1bf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf8:	dc 01       	movw	r26, r24
    1bfa:	cb 01       	movw	r24, r22
    1bfc:	98 ab       	std	Y+48, r25	; 0x30
    1bfe:	8f a7       	std	Y+47, r24	; 0x2f
    1c00:	0f c0       	rjmp	.+30     	; 0x1c20 <LCD_sendCommand+0xd2>
    1c02:	89 e1       	ldi	r24, 0x19	; 25
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	9e a7       	std	Y+46, r25	; 0x2e
    1c08:	8d a7       	std	Y+45, r24	; 0x2d
    1c0a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c0c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c0e:	01 97       	sbiw	r24, 0x01	; 1
    1c10:	f1 f7       	brne	.-4      	; 0x1c0e <LCD_sendCommand+0xc0>
    1c12:	9e a7       	std	Y+46, r25	; 0x2e
    1c14:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c16:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c18:	98 a9       	ldd	r25, Y+48	; 0x30
    1c1a:	01 97       	sbiw	r24, 0x01	; 1
    1c1c:	98 ab       	std	Y+48, r25	; 0x30
    1c1e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c20:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c22:	98 a9       	ldd	r25, Y+48	; 0x30
    1c24:	00 97       	sbiw	r24, 0x00	; 0
    1c26:	69 f7       	brne	.-38     	; 0x1c02 <LCD_sendCommand+0xb4>
    1c28:	14 c0       	rjmp	.+40     	; 0x1c52 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c2a:	69 a9       	ldd	r22, Y+49	; 0x31
    1c2c:	7a a9       	ldd	r23, Y+50	; 0x32
    1c2e:	8b a9       	ldd	r24, Y+51	; 0x33
    1c30:	9c a9       	ldd	r25, Y+52	; 0x34
    1c32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c36:	dc 01       	movw	r26, r24
    1c38:	cb 01       	movw	r24, r22
    1c3a:	98 ab       	std	Y+48, r25	; 0x30
    1c3c:	8f a7       	std	Y+47, r24	; 0x2f
    1c3e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c40:	98 a9       	ldd	r25, Y+48	; 0x30
    1c42:	9c a7       	std	Y+44, r25	; 0x2c
    1c44:	8b a7       	std	Y+43, r24	; 0x2b
    1c46:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c48:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c4a:	01 97       	sbiw	r24, 0x01	; 1
    1c4c:	f1 f7       	brne	.-4      	; 0x1c4a <LCD_sendCommand+0xfc>
    1c4e:	9c a7       	std	Y+44, r25	; 0x2c
    1c50:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1c52:	80 e0       	ldi	r24, 0x00	; 0
    1c54:	62 e0       	ldi	r22, 0x02	; 2
    1c56:	41 e0       	ldi	r20, 0x01	; 1
    1c58:	0e 94 2f 09 	call	0x125e	; 0x125e <GPIO_writePin>
    1c5c:	80 e0       	ldi	r24, 0x00	; 0
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	a0 e8       	ldi	r26, 0x80	; 128
    1c62:	bf e3       	ldi	r27, 0x3F	; 63
    1c64:	8f a3       	std	Y+39, r24	; 0x27
    1c66:	98 a7       	std	Y+40, r25	; 0x28
    1c68:	a9 a7       	std	Y+41, r26	; 0x29
    1c6a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c6c:	6f a1       	ldd	r22, Y+39	; 0x27
    1c6e:	78 a5       	ldd	r23, Y+40	; 0x28
    1c70:	89 a5       	ldd	r24, Y+41	; 0x29
    1c72:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c74:	20 e0       	ldi	r18, 0x00	; 0
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	4a e7       	ldi	r20, 0x7A	; 122
    1c7a:	53 e4       	ldi	r21, 0x43	; 67
    1c7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c80:	dc 01       	movw	r26, r24
    1c82:	cb 01       	movw	r24, r22
    1c84:	8b a3       	std	Y+35, r24	; 0x23
    1c86:	9c a3       	std	Y+36, r25	; 0x24
    1c88:	ad a3       	std	Y+37, r26	; 0x25
    1c8a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c8c:	6b a1       	ldd	r22, Y+35	; 0x23
    1c8e:	7c a1       	ldd	r23, Y+36	; 0x24
    1c90:	8d a1       	ldd	r24, Y+37	; 0x25
    1c92:	9e a1       	ldd	r25, Y+38	; 0x26
    1c94:	20 e0       	ldi	r18, 0x00	; 0
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	40 e8       	ldi	r20, 0x80	; 128
    1c9a:	5f e3       	ldi	r21, 0x3F	; 63
    1c9c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ca0:	88 23       	and	r24, r24
    1ca2:	2c f4       	brge	.+10     	; 0x1cae <LCD_sendCommand+0x160>
		__ticks = 1;
    1ca4:	81 e0       	ldi	r24, 0x01	; 1
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	9a a3       	std	Y+34, r25	; 0x22
    1caa:	89 a3       	std	Y+33, r24	; 0x21
    1cac:	3f c0       	rjmp	.+126    	; 0x1d2c <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1cae:	6b a1       	ldd	r22, Y+35	; 0x23
    1cb0:	7c a1       	ldd	r23, Y+36	; 0x24
    1cb2:	8d a1       	ldd	r24, Y+37	; 0x25
    1cb4:	9e a1       	ldd	r25, Y+38	; 0x26
    1cb6:	20 e0       	ldi	r18, 0x00	; 0
    1cb8:	3f ef       	ldi	r19, 0xFF	; 255
    1cba:	4f e7       	ldi	r20, 0x7F	; 127
    1cbc:	57 e4       	ldi	r21, 0x47	; 71
    1cbe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cc2:	18 16       	cp	r1, r24
    1cc4:	4c f5       	brge	.+82     	; 0x1d18 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cc6:	6f a1       	ldd	r22, Y+39	; 0x27
    1cc8:	78 a5       	ldd	r23, Y+40	; 0x28
    1cca:	89 a5       	ldd	r24, Y+41	; 0x29
    1ccc:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cce:	20 e0       	ldi	r18, 0x00	; 0
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	40 e2       	ldi	r20, 0x20	; 32
    1cd4:	51 e4       	ldi	r21, 0x41	; 65
    1cd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cda:	dc 01       	movw	r26, r24
    1cdc:	cb 01       	movw	r24, r22
    1cde:	bc 01       	movw	r22, r24
    1ce0:	cd 01       	movw	r24, r26
    1ce2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce6:	dc 01       	movw	r26, r24
    1ce8:	cb 01       	movw	r24, r22
    1cea:	9a a3       	std	Y+34, r25	; 0x22
    1cec:	89 a3       	std	Y+33, r24	; 0x21
    1cee:	0f c0       	rjmp	.+30     	; 0x1d0e <LCD_sendCommand+0x1c0>
    1cf0:	89 e1       	ldi	r24, 0x19	; 25
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	98 a3       	std	Y+32, r25	; 0x20
    1cf6:	8f 8f       	std	Y+31, r24	; 0x1f
    1cf8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1cfa:	98 a1       	ldd	r25, Y+32	; 0x20
    1cfc:	01 97       	sbiw	r24, 0x01	; 1
    1cfe:	f1 f7       	brne	.-4      	; 0x1cfc <LCD_sendCommand+0x1ae>
    1d00:	98 a3       	std	Y+32, r25	; 0x20
    1d02:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d04:	89 a1       	ldd	r24, Y+33	; 0x21
    1d06:	9a a1       	ldd	r25, Y+34	; 0x22
    1d08:	01 97       	sbiw	r24, 0x01	; 1
    1d0a:	9a a3       	std	Y+34, r25	; 0x22
    1d0c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d0e:	89 a1       	ldd	r24, Y+33	; 0x21
    1d10:	9a a1       	ldd	r25, Y+34	; 0x22
    1d12:	00 97       	sbiw	r24, 0x00	; 0
    1d14:	69 f7       	brne	.-38     	; 0x1cf0 <LCD_sendCommand+0x1a2>
    1d16:	14 c0       	rjmp	.+40     	; 0x1d40 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d18:	6b a1       	ldd	r22, Y+35	; 0x23
    1d1a:	7c a1       	ldd	r23, Y+36	; 0x24
    1d1c:	8d a1       	ldd	r24, Y+37	; 0x25
    1d1e:	9e a1       	ldd	r25, Y+38	; 0x26
    1d20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d24:	dc 01       	movw	r26, r24
    1d26:	cb 01       	movw	r24, r22
    1d28:	9a a3       	std	Y+34, r25	; 0x22
    1d2a:	89 a3       	std	Y+33, r24	; 0x21
    1d2c:	89 a1       	ldd	r24, Y+33	; 0x21
    1d2e:	9a a1       	ldd	r25, Y+34	; 0x22
    1d30:	9e 8f       	std	Y+30, r25	; 0x1e
    1d32:	8d 8f       	std	Y+29, r24	; 0x1d
    1d34:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d36:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d38:	01 97       	sbiw	r24, 0x01	; 1
    1d3a:	f1 f7       	brne	.-4      	; 0x1d38 <LCD_sendCommand+0x1ea>
    1d3c:	9e 8f       	std	Y+30, r25	; 0x1e
    1d3e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1d40:	81 e0       	ldi	r24, 0x01	; 1
    1d42:	69 ad       	ldd	r22, Y+57	; 0x39
    1d44:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <GPIO_writePort>
    1d48:	80 e0       	ldi	r24, 0x00	; 0
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	a0 e8       	ldi	r26, 0x80	; 128
    1d4e:	bf e3       	ldi	r27, 0x3F	; 63
    1d50:	89 8f       	std	Y+25, r24	; 0x19
    1d52:	9a 8f       	std	Y+26, r25	; 0x1a
    1d54:	ab 8f       	std	Y+27, r26	; 0x1b
    1d56:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d58:	69 8d       	ldd	r22, Y+25	; 0x19
    1d5a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d5c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d5e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d60:	20 e0       	ldi	r18, 0x00	; 0
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	4a e7       	ldi	r20, 0x7A	; 122
    1d66:	53 e4       	ldi	r21, 0x43	; 67
    1d68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d6c:	dc 01       	movw	r26, r24
    1d6e:	cb 01       	movw	r24, r22
    1d70:	8d 8b       	std	Y+21, r24	; 0x15
    1d72:	9e 8b       	std	Y+22, r25	; 0x16
    1d74:	af 8b       	std	Y+23, r26	; 0x17
    1d76:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d78:	6d 89       	ldd	r22, Y+21	; 0x15
    1d7a:	7e 89       	ldd	r23, Y+22	; 0x16
    1d7c:	8f 89       	ldd	r24, Y+23	; 0x17
    1d7e:	98 8d       	ldd	r25, Y+24	; 0x18
    1d80:	20 e0       	ldi	r18, 0x00	; 0
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	40 e8       	ldi	r20, 0x80	; 128
    1d86:	5f e3       	ldi	r21, 0x3F	; 63
    1d88:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d8c:	88 23       	and	r24, r24
    1d8e:	2c f4       	brge	.+10     	; 0x1d9a <LCD_sendCommand+0x24c>
		__ticks = 1;
    1d90:	81 e0       	ldi	r24, 0x01	; 1
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	9c 8b       	std	Y+20, r25	; 0x14
    1d96:	8b 8b       	std	Y+19, r24	; 0x13
    1d98:	3f c0       	rjmp	.+126    	; 0x1e18 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1d9a:	6d 89       	ldd	r22, Y+21	; 0x15
    1d9c:	7e 89       	ldd	r23, Y+22	; 0x16
    1d9e:	8f 89       	ldd	r24, Y+23	; 0x17
    1da0:	98 8d       	ldd	r25, Y+24	; 0x18
    1da2:	20 e0       	ldi	r18, 0x00	; 0
    1da4:	3f ef       	ldi	r19, 0xFF	; 255
    1da6:	4f e7       	ldi	r20, 0x7F	; 127
    1da8:	57 e4       	ldi	r21, 0x47	; 71
    1daa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dae:	18 16       	cp	r1, r24
    1db0:	4c f5       	brge	.+82     	; 0x1e04 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1db2:	69 8d       	ldd	r22, Y+25	; 0x19
    1db4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1db6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1db8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dba:	20 e0       	ldi	r18, 0x00	; 0
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	40 e2       	ldi	r20, 0x20	; 32
    1dc0:	51 e4       	ldi	r21, 0x41	; 65
    1dc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc6:	dc 01       	movw	r26, r24
    1dc8:	cb 01       	movw	r24, r22
    1dca:	bc 01       	movw	r22, r24
    1dcc:	cd 01       	movw	r24, r26
    1dce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dd2:	dc 01       	movw	r26, r24
    1dd4:	cb 01       	movw	r24, r22
    1dd6:	9c 8b       	std	Y+20, r25	; 0x14
    1dd8:	8b 8b       	std	Y+19, r24	; 0x13
    1dda:	0f c0       	rjmp	.+30     	; 0x1dfa <LCD_sendCommand+0x2ac>
    1ddc:	89 e1       	ldi	r24, 0x19	; 25
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	9a 8b       	std	Y+18, r25	; 0x12
    1de2:	89 8b       	std	Y+17, r24	; 0x11
    1de4:	89 89       	ldd	r24, Y+17	; 0x11
    1de6:	9a 89       	ldd	r25, Y+18	; 0x12
    1de8:	01 97       	sbiw	r24, 0x01	; 1
    1dea:	f1 f7       	brne	.-4      	; 0x1de8 <LCD_sendCommand+0x29a>
    1dec:	9a 8b       	std	Y+18, r25	; 0x12
    1dee:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1df0:	8b 89       	ldd	r24, Y+19	; 0x13
    1df2:	9c 89       	ldd	r25, Y+20	; 0x14
    1df4:	01 97       	sbiw	r24, 0x01	; 1
    1df6:	9c 8b       	std	Y+20, r25	; 0x14
    1df8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dfa:	8b 89       	ldd	r24, Y+19	; 0x13
    1dfc:	9c 89       	ldd	r25, Y+20	; 0x14
    1dfe:	00 97       	sbiw	r24, 0x00	; 0
    1e00:	69 f7       	brne	.-38     	; 0x1ddc <LCD_sendCommand+0x28e>
    1e02:	14 c0       	rjmp	.+40     	; 0x1e2c <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e04:	6d 89       	ldd	r22, Y+21	; 0x15
    1e06:	7e 89       	ldd	r23, Y+22	; 0x16
    1e08:	8f 89       	ldd	r24, Y+23	; 0x17
    1e0a:	98 8d       	ldd	r25, Y+24	; 0x18
    1e0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e10:	dc 01       	movw	r26, r24
    1e12:	cb 01       	movw	r24, r22
    1e14:	9c 8b       	std	Y+20, r25	; 0x14
    1e16:	8b 8b       	std	Y+19, r24	; 0x13
    1e18:	8b 89       	ldd	r24, Y+19	; 0x13
    1e1a:	9c 89       	ldd	r25, Y+20	; 0x14
    1e1c:	98 8b       	std	Y+16, r25	; 0x10
    1e1e:	8f 87       	std	Y+15, r24	; 0x0f
    1e20:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e22:	98 89       	ldd	r25, Y+16	; 0x10
    1e24:	01 97       	sbiw	r24, 0x01	; 1
    1e26:	f1 f7       	brne	.-4      	; 0x1e24 <LCD_sendCommand+0x2d6>
    1e28:	98 8b       	std	Y+16, r25	; 0x10
    1e2a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1e2c:	80 e0       	ldi	r24, 0x00	; 0
    1e2e:	62 e0       	ldi	r22, 0x02	; 2
    1e30:	40 e0       	ldi	r20, 0x00	; 0
    1e32:	0e 94 2f 09 	call	0x125e	; 0x125e <GPIO_writePin>
    1e36:	80 e0       	ldi	r24, 0x00	; 0
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	a0 e8       	ldi	r26, 0x80	; 128
    1e3c:	bf e3       	ldi	r27, 0x3F	; 63
    1e3e:	8b 87       	std	Y+11, r24	; 0x0b
    1e40:	9c 87       	std	Y+12, r25	; 0x0c
    1e42:	ad 87       	std	Y+13, r26	; 0x0d
    1e44:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e46:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e48:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e4e:	20 e0       	ldi	r18, 0x00	; 0
    1e50:	30 e0       	ldi	r19, 0x00	; 0
    1e52:	4a e7       	ldi	r20, 0x7A	; 122
    1e54:	53 e4       	ldi	r21, 0x43	; 67
    1e56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e5a:	dc 01       	movw	r26, r24
    1e5c:	cb 01       	movw	r24, r22
    1e5e:	8f 83       	std	Y+7, r24	; 0x07
    1e60:	98 87       	std	Y+8, r25	; 0x08
    1e62:	a9 87       	std	Y+9, r26	; 0x09
    1e64:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e66:	6f 81       	ldd	r22, Y+7	; 0x07
    1e68:	78 85       	ldd	r23, Y+8	; 0x08
    1e6a:	89 85       	ldd	r24, Y+9	; 0x09
    1e6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e6e:	20 e0       	ldi	r18, 0x00	; 0
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	40 e8       	ldi	r20, 0x80	; 128
    1e74:	5f e3       	ldi	r21, 0x3F	; 63
    1e76:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e7a:	88 23       	and	r24, r24
    1e7c:	2c f4       	brge	.+10     	; 0x1e88 <LCD_sendCommand+0x33a>
		__ticks = 1;
    1e7e:	81 e0       	ldi	r24, 0x01	; 1
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	9e 83       	std	Y+6, r25	; 0x06
    1e84:	8d 83       	std	Y+5, r24	; 0x05
    1e86:	3f c0       	rjmp	.+126    	; 0x1f06 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1e88:	6f 81       	ldd	r22, Y+7	; 0x07
    1e8a:	78 85       	ldd	r23, Y+8	; 0x08
    1e8c:	89 85       	ldd	r24, Y+9	; 0x09
    1e8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e90:	20 e0       	ldi	r18, 0x00	; 0
    1e92:	3f ef       	ldi	r19, 0xFF	; 255
    1e94:	4f e7       	ldi	r20, 0x7F	; 127
    1e96:	57 e4       	ldi	r21, 0x47	; 71
    1e98:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e9c:	18 16       	cp	r1, r24
    1e9e:	4c f5       	brge	.+82     	; 0x1ef2 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ea0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ea2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ea4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ea6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ea8:	20 e0       	ldi	r18, 0x00	; 0
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	40 e2       	ldi	r20, 0x20	; 32
    1eae:	51 e4       	ldi	r21, 0x41	; 65
    1eb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb4:	dc 01       	movw	r26, r24
    1eb6:	cb 01       	movw	r24, r22
    1eb8:	bc 01       	movw	r22, r24
    1eba:	cd 01       	movw	r24, r26
    1ebc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ec0:	dc 01       	movw	r26, r24
    1ec2:	cb 01       	movw	r24, r22
    1ec4:	9e 83       	std	Y+6, r25	; 0x06
    1ec6:	8d 83       	std	Y+5, r24	; 0x05
    1ec8:	0f c0       	rjmp	.+30     	; 0x1ee8 <LCD_sendCommand+0x39a>
    1eca:	89 e1       	ldi	r24, 0x19	; 25
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	9c 83       	std	Y+4, r25	; 0x04
    1ed0:	8b 83       	std	Y+3, r24	; 0x03
    1ed2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed6:	01 97       	sbiw	r24, 0x01	; 1
    1ed8:	f1 f7       	brne	.-4      	; 0x1ed6 <LCD_sendCommand+0x388>
    1eda:	9c 83       	std	Y+4, r25	; 0x04
    1edc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ede:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee2:	01 97       	sbiw	r24, 0x01	; 1
    1ee4:	9e 83       	std	Y+6, r25	; 0x06
    1ee6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ee8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eea:	9e 81       	ldd	r25, Y+6	; 0x06
    1eec:	00 97       	sbiw	r24, 0x00	; 0
    1eee:	69 f7       	brne	.-38     	; 0x1eca <LCD_sendCommand+0x37c>
    1ef0:	14 c0       	rjmp	.+40     	; 0x1f1a <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ef2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ef4:	78 85       	ldd	r23, Y+8	; 0x08
    1ef6:	89 85       	ldd	r24, Y+9	; 0x09
    1ef8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1efa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1efe:	dc 01       	movw	r26, r24
    1f00:	cb 01       	movw	r24, r22
    1f02:	9e 83       	std	Y+6, r25	; 0x06
    1f04:	8d 83       	std	Y+5, r24	; 0x05
    1f06:	8d 81       	ldd	r24, Y+5	; 0x05
    1f08:	9e 81       	ldd	r25, Y+6	; 0x06
    1f0a:	9a 83       	std	Y+2, r25	; 0x02
    1f0c:	89 83       	std	Y+1, r24	; 0x01
    1f0e:	89 81       	ldd	r24, Y+1	; 0x01
    1f10:	9a 81       	ldd	r25, Y+2	; 0x02
    1f12:	01 97       	sbiw	r24, 0x01	; 1
    1f14:	f1 f7       	brne	.-4      	; 0x1f12 <LCD_sendCommand+0x3c4>
    1f16:	9a 83       	std	Y+2, r25	; 0x02
    1f18:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1f1a:	e9 96       	adiw	r28, 0x39	; 57
    1f1c:	0f b6       	in	r0, 0x3f	; 63
    1f1e:	f8 94       	cli
    1f20:	de bf       	out	0x3e, r29	; 62
    1f22:	0f be       	out	0x3f, r0	; 63
    1f24:	cd bf       	out	0x3d, r28	; 61
    1f26:	cf 91       	pop	r28
    1f28:	df 91       	pop	r29
    1f2a:	08 95       	ret

00001f2c <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1f2c:	df 93       	push	r29
    1f2e:	cf 93       	push	r28
    1f30:	cd b7       	in	r28, 0x3d	; 61
    1f32:	de b7       	in	r29, 0x3e	; 62
    1f34:	e9 97       	sbiw	r28, 0x39	; 57
    1f36:	0f b6       	in	r0, 0x3f	; 63
    1f38:	f8 94       	cli
    1f3a:	de bf       	out	0x3e, r29	; 62
    1f3c:	0f be       	out	0x3f, r0	; 63
    1f3e:	cd bf       	out	0x3d, r28	; 61
    1f40:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1f42:	80 e0       	ldi	r24, 0x00	; 0
    1f44:	61 e0       	ldi	r22, 0x01	; 1
    1f46:	41 e0       	ldi	r20, 0x01	; 1
    1f48:	0e 94 2f 09 	call	0x125e	; 0x125e <GPIO_writePin>
    1f4c:	80 e0       	ldi	r24, 0x00	; 0
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	a0 e8       	ldi	r26, 0x80	; 128
    1f52:	bf e3       	ldi	r27, 0x3F	; 63
    1f54:	8d ab       	std	Y+53, r24	; 0x35
    1f56:	9e ab       	std	Y+54, r25	; 0x36
    1f58:	af ab       	std	Y+55, r26	; 0x37
    1f5a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f5c:	6d a9       	ldd	r22, Y+53	; 0x35
    1f5e:	7e a9       	ldd	r23, Y+54	; 0x36
    1f60:	8f a9       	ldd	r24, Y+55	; 0x37
    1f62:	98 ad       	ldd	r25, Y+56	; 0x38
    1f64:	20 e0       	ldi	r18, 0x00	; 0
    1f66:	30 e0       	ldi	r19, 0x00	; 0
    1f68:	4a e7       	ldi	r20, 0x7A	; 122
    1f6a:	53 e4       	ldi	r21, 0x43	; 67
    1f6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f70:	dc 01       	movw	r26, r24
    1f72:	cb 01       	movw	r24, r22
    1f74:	89 ab       	std	Y+49, r24	; 0x31
    1f76:	9a ab       	std	Y+50, r25	; 0x32
    1f78:	ab ab       	std	Y+51, r26	; 0x33
    1f7a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f7c:	69 a9       	ldd	r22, Y+49	; 0x31
    1f7e:	7a a9       	ldd	r23, Y+50	; 0x32
    1f80:	8b a9       	ldd	r24, Y+51	; 0x33
    1f82:	9c a9       	ldd	r25, Y+52	; 0x34
    1f84:	20 e0       	ldi	r18, 0x00	; 0
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	40 e8       	ldi	r20, 0x80	; 128
    1f8a:	5f e3       	ldi	r21, 0x3F	; 63
    1f8c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f90:	88 23       	and	r24, r24
    1f92:	2c f4       	brge	.+10     	; 0x1f9e <LCD_displayCharacter+0x72>
		__ticks = 1;
    1f94:	81 e0       	ldi	r24, 0x01	; 1
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	98 ab       	std	Y+48, r25	; 0x30
    1f9a:	8f a7       	std	Y+47, r24	; 0x2f
    1f9c:	3f c0       	rjmp	.+126    	; 0x201c <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1f9e:	69 a9       	ldd	r22, Y+49	; 0x31
    1fa0:	7a a9       	ldd	r23, Y+50	; 0x32
    1fa2:	8b a9       	ldd	r24, Y+51	; 0x33
    1fa4:	9c a9       	ldd	r25, Y+52	; 0x34
    1fa6:	20 e0       	ldi	r18, 0x00	; 0
    1fa8:	3f ef       	ldi	r19, 0xFF	; 255
    1faa:	4f e7       	ldi	r20, 0x7F	; 127
    1fac:	57 e4       	ldi	r21, 0x47	; 71
    1fae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fb2:	18 16       	cp	r1, r24
    1fb4:	4c f5       	brge	.+82     	; 0x2008 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fb6:	6d a9       	ldd	r22, Y+53	; 0x35
    1fb8:	7e a9       	ldd	r23, Y+54	; 0x36
    1fba:	8f a9       	ldd	r24, Y+55	; 0x37
    1fbc:	98 ad       	ldd	r25, Y+56	; 0x38
    1fbe:	20 e0       	ldi	r18, 0x00	; 0
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	40 e2       	ldi	r20, 0x20	; 32
    1fc4:	51 e4       	ldi	r21, 0x41	; 65
    1fc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fca:	dc 01       	movw	r26, r24
    1fcc:	cb 01       	movw	r24, r22
    1fce:	bc 01       	movw	r22, r24
    1fd0:	cd 01       	movw	r24, r26
    1fd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd6:	dc 01       	movw	r26, r24
    1fd8:	cb 01       	movw	r24, r22
    1fda:	98 ab       	std	Y+48, r25	; 0x30
    1fdc:	8f a7       	std	Y+47, r24	; 0x2f
    1fde:	0f c0       	rjmp	.+30     	; 0x1ffe <LCD_displayCharacter+0xd2>
    1fe0:	89 e1       	ldi	r24, 0x19	; 25
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	9e a7       	std	Y+46, r25	; 0x2e
    1fe6:	8d a7       	std	Y+45, r24	; 0x2d
    1fe8:	8d a5       	ldd	r24, Y+45	; 0x2d
    1fea:	9e a5       	ldd	r25, Y+46	; 0x2e
    1fec:	01 97       	sbiw	r24, 0x01	; 1
    1fee:	f1 f7       	brne	.-4      	; 0x1fec <LCD_displayCharacter+0xc0>
    1ff0:	9e a7       	std	Y+46, r25	; 0x2e
    1ff2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ff4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ff6:	98 a9       	ldd	r25, Y+48	; 0x30
    1ff8:	01 97       	sbiw	r24, 0x01	; 1
    1ffa:	98 ab       	std	Y+48, r25	; 0x30
    1ffc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ffe:	8f a5       	ldd	r24, Y+47	; 0x2f
    2000:	98 a9       	ldd	r25, Y+48	; 0x30
    2002:	00 97       	sbiw	r24, 0x00	; 0
    2004:	69 f7       	brne	.-38     	; 0x1fe0 <LCD_displayCharacter+0xb4>
    2006:	14 c0       	rjmp	.+40     	; 0x2030 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2008:	69 a9       	ldd	r22, Y+49	; 0x31
    200a:	7a a9       	ldd	r23, Y+50	; 0x32
    200c:	8b a9       	ldd	r24, Y+51	; 0x33
    200e:	9c a9       	ldd	r25, Y+52	; 0x34
    2010:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2014:	dc 01       	movw	r26, r24
    2016:	cb 01       	movw	r24, r22
    2018:	98 ab       	std	Y+48, r25	; 0x30
    201a:	8f a7       	std	Y+47, r24	; 0x2f
    201c:	8f a5       	ldd	r24, Y+47	; 0x2f
    201e:	98 a9       	ldd	r25, Y+48	; 0x30
    2020:	9c a7       	std	Y+44, r25	; 0x2c
    2022:	8b a7       	std	Y+43, r24	; 0x2b
    2024:	8b a5       	ldd	r24, Y+43	; 0x2b
    2026:	9c a5       	ldd	r25, Y+44	; 0x2c
    2028:	01 97       	sbiw	r24, 0x01	; 1
    202a:	f1 f7       	brne	.-4      	; 0x2028 <LCD_displayCharacter+0xfc>
    202c:	9c a7       	std	Y+44, r25	; 0x2c
    202e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2030:	80 e0       	ldi	r24, 0x00	; 0
    2032:	62 e0       	ldi	r22, 0x02	; 2
    2034:	41 e0       	ldi	r20, 0x01	; 1
    2036:	0e 94 2f 09 	call	0x125e	; 0x125e <GPIO_writePin>
    203a:	80 e0       	ldi	r24, 0x00	; 0
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	a0 e8       	ldi	r26, 0x80	; 128
    2040:	bf e3       	ldi	r27, 0x3F	; 63
    2042:	8f a3       	std	Y+39, r24	; 0x27
    2044:	98 a7       	std	Y+40, r25	; 0x28
    2046:	a9 a7       	std	Y+41, r26	; 0x29
    2048:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    204a:	6f a1       	ldd	r22, Y+39	; 0x27
    204c:	78 a5       	ldd	r23, Y+40	; 0x28
    204e:	89 a5       	ldd	r24, Y+41	; 0x29
    2050:	9a a5       	ldd	r25, Y+42	; 0x2a
    2052:	20 e0       	ldi	r18, 0x00	; 0
    2054:	30 e0       	ldi	r19, 0x00	; 0
    2056:	4a e7       	ldi	r20, 0x7A	; 122
    2058:	53 e4       	ldi	r21, 0x43	; 67
    205a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    205e:	dc 01       	movw	r26, r24
    2060:	cb 01       	movw	r24, r22
    2062:	8b a3       	std	Y+35, r24	; 0x23
    2064:	9c a3       	std	Y+36, r25	; 0x24
    2066:	ad a3       	std	Y+37, r26	; 0x25
    2068:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    206a:	6b a1       	ldd	r22, Y+35	; 0x23
    206c:	7c a1       	ldd	r23, Y+36	; 0x24
    206e:	8d a1       	ldd	r24, Y+37	; 0x25
    2070:	9e a1       	ldd	r25, Y+38	; 0x26
    2072:	20 e0       	ldi	r18, 0x00	; 0
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	40 e8       	ldi	r20, 0x80	; 128
    2078:	5f e3       	ldi	r21, 0x3F	; 63
    207a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    207e:	88 23       	and	r24, r24
    2080:	2c f4       	brge	.+10     	; 0x208c <LCD_displayCharacter+0x160>
		__ticks = 1;
    2082:	81 e0       	ldi	r24, 0x01	; 1
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	9a a3       	std	Y+34, r25	; 0x22
    2088:	89 a3       	std	Y+33, r24	; 0x21
    208a:	3f c0       	rjmp	.+126    	; 0x210a <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    208c:	6b a1       	ldd	r22, Y+35	; 0x23
    208e:	7c a1       	ldd	r23, Y+36	; 0x24
    2090:	8d a1       	ldd	r24, Y+37	; 0x25
    2092:	9e a1       	ldd	r25, Y+38	; 0x26
    2094:	20 e0       	ldi	r18, 0x00	; 0
    2096:	3f ef       	ldi	r19, 0xFF	; 255
    2098:	4f e7       	ldi	r20, 0x7F	; 127
    209a:	57 e4       	ldi	r21, 0x47	; 71
    209c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20a0:	18 16       	cp	r1, r24
    20a2:	4c f5       	brge	.+82     	; 0x20f6 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20a4:	6f a1       	ldd	r22, Y+39	; 0x27
    20a6:	78 a5       	ldd	r23, Y+40	; 0x28
    20a8:	89 a5       	ldd	r24, Y+41	; 0x29
    20aa:	9a a5       	ldd	r25, Y+42	; 0x2a
    20ac:	20 e0       	ldi	r18, 0x00	; 0
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	40 e2       	ldi	r20, 0x20	; 32
    20b2:	51 e4       	ldi	r21, 0x41	; 65
    20b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20b8:	dc 01       	movw	r26, r24
    20ba:	cb 01       	movw	r24, r22
    20bc:	bc 01       	movw	r22, r24
    20be:	cd 01       	movw	r24, r26
    20c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20c4:	dc 01       	movw	r26, r24
    20c6:	cb 01       	movw	r24, r22
    20c8:	9a a3       	std	Y+34, r25	; 0x22
    20ca:	89 a3       	std	Y+33, r24	; 0x21
    20cc:	0f c0       	rjmp	.+30     	; 0x20ec <LCD_displayCharacter+0x1c0>
    20ce:	89 e1       	ldi	r24, 0x19	; 25
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	98 a3       	std	Y+32, r25	; 0x20
    20d4:	8f 8f       	std	Y+31, r24	; 0x1f
    20d6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20d8:	98 a1       	ldd	r25, Y+32	; 0x20
    20da:	01 97       	sbiw	r24, 0x01	; 1
    20dc:	f1 f7       	brne	.-4      	; 0x20da <LCD_displayCharacter+0x1ae>
    20de:	98 a3       	std	Y+32, r25	; 0x20
    20e0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20e2:	89 a1       	ldd	r24, Y+33	; 0x21
    20e4:	9a a1       	ldd	r25, Y+34	; 0x22
    20e6:	01 97       	sbiw	r24, 0x01	; 1
    20e8:	9a a3       	std	Y+34, r25	; 0x22
    20ea:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ec:	89 a1       	ldd	r24, Y+33	; 0x21
    20ee:	9a a1       	ldd	r25, Y+34	; 0x22
    20f0:	00 97       	sbiw	r24, 0x00	; 0
    20f2:	69 f7       	brne	.-38     	; 0x20ce <LCD_displayCharacter+0x1a2>
    20f4:	14 c0       	rjmp	.+40     	; 0x211e <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20f6:	6b a1       	ldd	r22, Y+35	; 0x23
    20f8:	7c a1       	ldd	r23, Y+36	; 0x24
    20fa:	8d a1       	ldd	r24, Y+37	; 0x25
    20fc:	9e a1       	ldd	r25, Y+38	; 0x26
    20fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2102:	dc 01       	movw	r26, r24
    2104:	cb 01       	movw	r24, r22
    2106:	9a a3       	std	Y+34, r25	; 0x22
    2108:	89 a3       	std	Y+33, r24	; 0x21
    210a:	89 a1       	ldd	r24, Y+33	; 0x21
    210c:	9a a1       	ldd	r25, Y+34	; 0x22
    210e:	9e 8f       	std	Y+30, r25	; 0x1e
    2110:	8d 8f       	std	Y+29, r24	; 0x1d
    2112:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2114:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2116:	01 97       	sbiw	r24, 0x01	; 1
    2118:	f1 f7       	brne	.-4      	; 0x2116 <LCD_displayCharacter+0x1ea>
    211a:	9e 8f       	std	Y+30, r25	; 0x1e
    211c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	69 ad       	ldd	r22, Y+57	; 0x39
    2122:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <GPIO_writePort>
    2126:	80 e0       	ldi	r24, 0x00	; 0
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	a0 e8       	ldi	r26, 0x80	; 128
    212c:	bf e3       	ldi	r27, 0x3F	; 63
    212e:	89 8f       	std	Y+25, r24	; 0x19
    2130:	9a 8f       	std	Y+26, r25	; 0x1a
    2132:	ab 8f       	std	Y+27, r26	; 0x1b
    2134:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2136:	69 8d       	ldd	r22, Y+25	; 0x19
    2138:	7a 8d       	ldd	r23, Y+26	; 0x1a
    213a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    213c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    213e:	20 e0       	ldi	r18, 0x00	; 0
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	4a e7       	ldi	r20, 0x7A	; 122
    2144:	53 e4       	ldi	r21, 0x43	; 67
    2146:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    214a:	dc 01       	movw	r26, r24
    214c:	cb 01       	movw	r24, r22
    214e:	8d 8b       	std	Y+21, r24	; 0x15
    2150:	9e 8b       	std	Y+22, r25	; 0x16
    2152:	af 8b       	std	Y+23, r26	; 0x17
    2154:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2156:	6d 89       	ldd	r22, Y+21	; 0x15
    2158:	7e 89       	ldd	r23, Y+22	; 0x16
    215a:	8f 89       	ldd	r24, Y+23	; 0x17
    215c:	98 8d       	ldd	r25, Y+24	; 0x18
    215e:	20 e0       	ldi	r18, 0x00	; 0
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	40 e8       	ldi	r20, 0x80	; 128
    2164:	5f e3       	ldi	r21, 0x3F	; 63
    2166:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    216a:	88 23       	and	r24, r24
    216c:	2c f4       	brge	.+10     	; 0x2178 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    216e:	81 e0       	ldi	r24, 0x01	; 1
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	9c 8b       	std	Y+20, r25	; 0x14
    2174:	8b 8b       	std	Y+19, r24	; 0x13
    2176:	3f c0       	rjmp	.+126    	; 0x21f6 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2178:	6d 89       	ldd	r22, Y+21	; 0x15
    217a:	7e 89       	ldd	r23, Y+22	; 0x16
    217c:	8f 89       	ldd	r24, Y+23	; 0x17
    217e:	98 8d       	ldd	r25, Y+24	; 0x18
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	3f ef       	ldi	r19, 0xFF	; 255
    2184:	4f e7       	ldi	r20, 0x7F	; 127
    2186:	57 e4       	ldi	r21, 0x47	; 71
    2188:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    218c:	18 16       	cp	r1, r24
    218e:	4c f5       	brge	.+82     	; 0x21e2 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2190:	69 8d       	ldd	r22, Y+25	; 0x19
    2192:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2194:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2196:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2198:	20 e0       	ldi	r18, 0x00	; 0
    219a:	30 e0       	ldi	r19, 0x00	; 0
    219c:	40 e2       	ldi	r20, 0x20	; 32
    219e:	51 e4       	ldi	r21, 0x41	; 65
    21a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a4:	dc 01       	movw	r26, r24
    21a6:	cb 01       	movw	r24, r22
    21a8:	bc 01       	movw	r22, r24
    21aa:	cd 01       	movw	r24, r26
    21ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b0:	dc 01       	movw	r26, r24
    21b2:	cb 01       	movw	r24, r22
    21b4:	9c 8b       	std	Y+20, r25	; 0x14
    21b6:	8b 8b       	std	Y+19, r24	; 0x13
    21b8:	0f c0       	rjmp	.+30     	; 0x21d8 <LCD_displayCharacter+0x2ac>
    21ba:	89 e1       	ldi	r24, 0x19	; 25
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	9a 8b       	std	Y+18, r25	; 0x12
    21c0:	89 8b       	std	Y+17, r24	; 0x11
    21c2:	89 89       	ldd	r24, Y+17	; 0x11
    21c4:	9a 89       	ldd	r25, Y+18	; 0x12
    21c6:	01 97       	sbiw	r24, 0x01	; 1
    21c8:	f1 f7       	brne	.-4      	; 0x21c6 <LCD_displayCharacter+0x29a>
    21ca:	9a 8b       	std	Y+18, r25	; 0x12
    21cc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ce:	8b 89       	ldd	r24, Y+19	; 0x13
    21d0:	9c 89       	ldd	r25, Y+20	; 0x14
    21d2:	01 97       	sbiw	r24, 0x01	; 1
    21d4:	9c 8b       	std	Y+20, r25	; 0x14
    21d6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21d8:	8b 89       	ldd	r24, Y+19	; 0x13
    21da:	9c 89       	ldd	r25, Y+20	; 0x14
    21dc:	00 97       	sbiw	r24, 0x00	; 0
    21de:	69 f7       	brne	.-38     	; 0x21ba <LCD_displayCharacter+0x28e>
    21e0:	14 c0       	rjmp	.+40     	; 0x220a <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21e2:	6d 89       	ldd	r22, Y+21	; 0x15
    21e4:	7e 89       	ldd	r23, Y+22	; 0x16
    21e6:	8f 89       	ldd	r24, Y+23	; 0x17
    21e8:	98 8d       	ldd	r25, Y+24	; 0x18
    21ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ee:	dc 01       	movw	r26, r24
    21f0:	cb 01       	movw	r24, r22
    21f2:	9c 8b       	std	Y+20, r25	; 0x14
    21f4:	8b 8b       	std	Y+19, r24	; 0x13
    21f6:	8b 89       	ldd	r24, Y+19	; 0x13
    21f8:	9c 89       	ldd	r25, Y+20	; 0x14
    21fa:	98 8b       	std	Y+16, r25	; 0x10
    21fc:	8f 87       	std	Y+15, r24	; 0x0f
    21fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2200:	98 89       	ldd	r25, Y+16	; 0x10
    2202:	01 97       	sbiw	r24, 0x01	; 1
    2204:	f1 f7       	brne	.-4      	; 0x2202 <LCD_displayCharacter+0x2d6>
    2206:	98 8b       	std	Y+16, r25	; 0x10
    2208:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    220a:	80 e0       	ldi	r24, 0x00	; 0
    220c:	62 e0       	ldi	r22, 0x02	; 2
    220e:	40 e0       	ldi	r20, 0x00	; 0
    2210:	0e 94 2f 09 	call	0x125e	; 0x125e <GPIO_writePin>
    2214:	80 e0       	ldi	r24, 0x00	; 0
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	a0 e8       	ldi	r26, 0x80	; 128
    221a:	bf e3       	ldi	r27, 0x3F	; 63
    221c:	8b 87       	std	Y+11, r24	; 0x0b
    221e:	9c 87       	std	Y+12, r25	; 0x0c
    2220:	ad 87       	std	Y+13, r26	; 0x0d
    2222:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2224:	6b 85       	ldd	r22, Y+11	; 0x0b
    2226:	7c 85       	ldd	r23, Y+12	; 0x0c
    2228:	8d 85       	ldd	r24, Y+13	; 0x0d
    222a:	9e 85       	ldd	r25, Y+14	; 0x0e
    222c:	20 e0       	ldi	r18, 0x00	; 0
    222e:	30 e0       	ldi	r19, 0x00	; 0
    2230:	4a e7       	ldi	r20, 0x7A	; 122
    2232:	53 e4       	ldi	r21, 0x43	; 67
    2234:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2238:	dc 01       	movw	r26, r24
    223a:	cb 01       	movw	r24, r22
    223c:	8f 83       	std	Y+7, r24	; 0x07
    223e:	98 87       	std	Y+8, r25	; 0x08
    2240:	a9 87       	std	Y+9, r26	; 0x09
    2242:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2244:	6f 81       	ldd	r22, Y+7	; 0x07
    2246:	78 85       	ldd	r23, Y+8	; 0x08
    2248:	89 85       	ldd	r24, Y+9	; 0x09
    224a:	9a 85       	ldd	r25, Y+10	; 0x0a
    224c:	20 e0       	ldi	r18, 0x00	; 0
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	40 e8       	ldi	r20, 0x80	; 128
    2252:	5f e3       	ldi	r21, 0x3F	; 63
    2254:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2258:	88 23       	and	r24, r24
    225a:	2c f4       	brge	.+10     	; 0x2266 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    225c:	81 e0       	ldi	r24, 0x01	; 1
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	9e 83       	std	Y+6, r25	; 0x06
    2262:	8d 83       	std	Y+5, r24	; 0x05
    2264:	3f c0       	rjmp	.+126    	; 0x22e4 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2266:	6f 81       	ldd	r22, Y+7	; 0x07
    2268:	78 85       	ldd	r23, Y+8	; 0x08
    226a:	89 85       	ldd	r24, Y+9	; 0x09
    226c:	9a 85       	ldd	r25, Y+10	; 0x0a
    226e:	20 e0       	ldi	r18, 0x00	; 0
    2270:	3f ef       	ldi	r19, 0xFF	; 255
    2272:	4f e7       	ldi	r20, 0x7F	; 127
    2274:	57 e4       	ldi	r21, 0x47	; 71
    2276:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    227a:	18 16       	cp	r1, r24
    227c:	4c f5       	brge	.+82     	; 0x22d0 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    227e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2280:	7c 85       	ldd	r23, Y+12	; 0x0c
    2282:	8d 85       	ldd	r24, Y+13	; 0x0d
    2284:	9e 85       	ldd	r25, Y+14	; 0x0e
    2286:	20 e0       	ldi	r18, 0x00	; 0
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	40 e2       	ldi	r20, 0x20	; 32
    228c:	51 e4       	ldi	r21, 0x41	; 65
    228e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2292:	dc 01       	movw	r26, r24
    2294:	cb 01       	movw	r24, r22
    2296:	bc 01       	movw	r22, r24
    2298:	cd 01       	movw	r24, r26
    229a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    229e:	dc 01       	movw	r26, r24
    22a0:	cb 01       	movw	r24, r22
    22a2:	9e 83       	std	Y+6, r25	; 0x06
    22a4:	8d 83       	std	Y+5, r24	; 0x05
    22a6:	0f c0       	rjmp	.+30     	; 0x22c6 <LCD_displayCharacter+0x39a>
    22a8:	89 e1       	ldi	r24, 0x19	; 25
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	9c 83       	std	Y+4, r25	; 0x04
    22ae:	8b 83       	std	Y+3, r24	; 0x03
    22b0:	8b 81       	ldd	r24, Y+3	; 0x03
    22b2:	9c 81       	ldd	r25, Y+4	; 0x04
    22b4:	01 97       	sbiw	r24, 0x01	; 1
    22b6:	f1 f7       	brne	.-4      	; 0x22b4 <LCD_displayCharacter+0x388>
    22b8:	9c 83       	std	Y+4, r25	; 0x04
    22ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22bc:	8d 81       	ldd	r24, Y+5	; 0x05
    22be:	9e 81       	ldd	r25, Y+6	; 0x06
    22c0:	01 97       	sbiw	r24, 0x01	; 1
    22c2:	9e 83       	std	Y+6, r25	; 0x06
    22c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22c6:	8d 81       	ldd	r24, Y+5	; 0x05
    22c8:	9e 81       	ldd	r25, Y+6	; 0x06
    22ca:	00 97       	sbiw	r24, 0x00	; 0
    22cc:	69 f7       	brne	.-38     	; 0x22a8 <LCD_displayCharacter+0x37c>
    22ce:	14 c0       	rjmp	.+40     	; 0x22f8 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22d0:	6f 81       	ldd	r22, Y+7	; 0x07
    22d2:	78 85       	ldd	r23, Y+8	; 0x08
    22d4:	89 85       	ldd	r24, Y+9	; 0x09
    22d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    22d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22dc:	dc 01       	movw	r26, r24
    22de:	cb 01       	movw	r24, r22
    22e0:	9e 83       	std	Y+6, r25	; 0x06
    22e2:	8d 83       	std	Y+5, r24	; 0x05
    22e4:	8d 81       	ldd	r24, Y+5	; 0x05
    22e6:	9e 81       	ldd	r25, Y+6	; 0x06
    22e8:	9a 83       	std	Y+2, r25	; 0x02
    22ea:	89 83       	std	Y+1, r24	; 0x01
    22ec:	89 81       	ldd	r24, Y+1	; 0x01
    22ee:	9a 81       	ldd	r25, Y+2	; 0x02
    22f0:	01 97       	sbiw	r24, 0x01	; 1
    22f2:	f1 f7       	brne	.-4      	; 0x22f0 <LCD_displayCharacter+0x3c4>
    22f4:	9a 83       	std	Y+2, r25	; 0x02
    22f6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    22f8:	e9 96       	adiw	r28, 0x39	; 57
    22fa:	0f b6       	in	r0, 0x3f	; 63
    22fc:	f8 94       	cli
    22fe:	de bf       	out	0x3e, r29	; 62
    2300:	0f be       	out	0x3f, r0	; 63
    2302:	cd bf       	out	0x3d, r28	; 61
    2304:	cf 91       	pop	r28
    2306:	df 91       	pop	r29
    2308:	08 95       	ret

0000230a <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    230a:	df 93       	push	r29
    230c:	cf 93       	push	r28
    230e:	00 d0       	rcall	.+0      	; 0x2310 <LCD_displayString+0x6>
    2310:	0f 92       	push	r0
    2312:	cd b7       	in	r28, 0x3d	; 61
    2314:	de b7       	in	r29, 0x3e	; 62
    2316:	9b 83       	std	Y+3, r25	; 0x03
    2318:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    231a:	19 82       	std	Y+1, r1	; 0x01
    231c:	0e c0       	rjmp	.+28     	; 0x233a <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    231e:	89 81       	ldd	r24, Y+1	; 0x01
    2320:	28 2f       	mov	r18, r24
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	8a 81       	ldd	r24, Y+2	; 0x02
    2326:	9b 81       	ldd	r25, Y+3	; 0x03
    2328:	fc 01       	movw	r30, r24
    232a:	e2 0f       	add	r30, r18
    232c:	f3 1f       	adc	r31, r19
    232e:	80 81       	ld	r24, Z
    2330:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <LCD_displayCharacter>
		i++;
    2334:	89 81       	ldd	r24, Y+1	; 0x01
    2336:	8f 5f       	subi	r24, 0xFF	; 255
    2338:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    233a:	89 81       	ldd	r24, Y+1	; 0x01
    233c:	28 2f       	mov	r18, r24
    233e:	30 e0       	ldi	r19, 0x00	; 0
    2340:	8a 81       	ldd	r24, Y+2	; 0x02
    2342:	9b 81       	ldd	r25, Y+3	; 0x03
    2344:	fc 01       	movw	r30, r24
    2346:	e2 0f       	add	r30, r18
    2348:	f3 1f       	adc	r31, r19
    234a:	80 81       	ld	r24, Z
    234c:	88 23       	and	r24, r24
    234e:	39 f7       	brne	.-50     	; 0x231e <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
    2350:	0f 90       	pop	r0
    2352:	0f 90       	pop	r0
    2354:	0f 90       	pop	r0
    2356:	cf 91       	pop	r28
    2358:	df 91       	pop	r29
    235a:	08 95       	ret

0000235c <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    235c:	df 93       	push	r29
    235e:	cf 93       	push	r28
    2360:	00 d0       	rcall	.+0      	; 0x2362 <LCD_moveCursor+0x6>
    2362:	00 d0       	rcall	.+0      	; 0x2364 <LCD_moveCursor+0x8>
    2364:	0f 92       	push	r0
    2366:	cd b7       	in	r28, 0x3d	; 61
    2368:	de b7       	in	r29, 0x3e	; 62
    236a:	8a 83       	std	Y+2, r24	; 0x02
    236c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    236e:	8a 81       	ldd	r24, Y+2	; 0x02
    2370:	28 2f       	mov	r18, r24
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	3d 83       	std	Y+5, r19	; 0x05
    2376:	2c 83       	std	Y+4, r18	; 0x04
    2378:	8c 81       	ldd	r24, Y+4	; 0x04
    237a:	9d 81       	ldd	r25, Y+5	; 0x05
    237c:	81 30       	cpi	r24, 0x01	; 1
    237e:	91 05       	cpc	r25, r1
    2380:	c1 f0       	breq	.+48     	; 0x23b2 <LCD_moveCursor+0x56>
    2382:	2c 81       	ldd	r18, Y+4	; 0x04
    2384:	3d 81       	ldd	r19, Y+5	; 0x05
    2386:	22 30       	cpi	r18, 0x02	; 2
    2388:	31 05       	cpc	r19, r1
    238a:	2c f4       	brge	.+10     	; 0x2396 <LCD_moveCursor+0x3a>
    238c:	8c 81       	ldd	r24, Y+4	; 0x04
    238e:	9d 81       	ldd	r25, Y+5	; 0x05
    2390:	00 97       	sbiw	r24, 0x00	; 0
    2392:	61 f0       	breq	.+24     	; 0x23ac <LCD_moveCursor+0x50>
    2394:	19 c0       	rjmp	.+50     	; 0x23c8 <LCD_moveCursor+0x6c>
    2396:	2c 81       	ldd	r18, Y+4	; 0x04
    2398:	3d 81       	ldd	r19, Y+5	; 0x05
    239a:	22 30       	cpi	r18, 0x02	; 2
    239c:	31 05       	cpc	r19, r1
    239e:	69 f0       	breq	.+26     	; 0x23ba <LCD_moveCursor+0x5e>
    23a0:	8c 81       	ldd	r24, Y+4	; 0x04
    23a2:	9d 81       	ldd	r25, Y+5	; 0x05
    23a4:	83 30       	cpi	r24, 0x03	; 3
    23a6:	91 05       	cpc	r25, r1
    23a8:	61 f0       	breq	.+24     	; 0x23c2 <LCD_moveCursor+0x66>
    23aa:	0e c0       	rjmp	.+28     	; 0x23c8 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    23ac:	8b 81       	ldd	r24, Y+3	; 0x03
    23ae:	89 83       	std	Y+1, r24	; 0x01
    23b0:	0b c0       	rjmp	.+22     	; 0x23c8 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    23b2:	8b 81       	ldd	r24, Y+3	; 0x03
    23b4:	80 5c       	subi	r24, 0xC0	; 192
    23b6:	89 83       	std	Y+1, r24	; 0x01
    23b8:	07 c0       	rjmp	.+14     	; 0x23c8 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    23ba:	8b 81       	ldd	r24, Y+3	; 0x03
    23bc:	80 5f       	subi	r24, 0xF0	; 240
    23be:	89 83       	std	Y+1, r24	; 0x01
    23c0:	03 c0       	rjmp	.+6      	; 0x23c8 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    23c2:	8b 81       	ldd	r24, Y+3	; 0x03
    23c4:	80 5b       	subi	r24, 0xB0	; 176
    23c6:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    23c8:	89 81       	ldd	r24, Y+1	; 0x01
    23ca:	80 68       	ori	r24, 0x80	; 128
    23cc:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <LCD_sendCommand>
}
    23d0:	0f 90       	pop	r0
    23d2:	0f 90       	pop	r0
    23d4:	0f 90       	pop	r0
    23d6:	0f 90       	pop	r0
    23d8:	0f 90       	pop	r0
    23da:	cf 91       	pop	r28
    23dc:	df 91       	pop	r29
    23de:	08 95       	ret

000023e0 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    23e0:	df 93       	push	r29
    23e2:	cf 93       	push	r28
    23e4:	00 d0       	rcall	.+0      	; 0x23e6 <LCD_displayStringRowColumn+0x6>
    23e6:	00 d0       	rcall	.+0      	; 0x23e8 <LCD_displayStringRowColumn+0x8>
    23e8:	cd b7       	in	r28, 0x3d	; 61
    23ea:	de b7       	in	r29, 0x3e	; 62
    23ec:	89 83       	std	Y+1, r24	; 0x01
    23ee:	6a 83       	std	Y+2, r22	; 0x02
    23f0:	5c 83       	std	Y+4, r21	; 0x04
    23f2:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    23f4:	89 81       	ldd	r24, Y+1	; 0x01
    23f6:	6a 81       	ldd	r22, Y+2	; 0x02
    23f8:	0e 94 ae 11 	call	0x235c	; 0x235c <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    23fc:	8b 81       	ldd	r24, Y+3	; 0x03
    23fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2400:	0e 94 85 11 	call	0x230a	; 0x230a <LCD_displayString>
}
    2404:	0f 90       	pop	r0
    2406:	0f 90       	pop	r0
    2408:	0f 90       	pop	r0
    240a:	0f 90       	pop	r0
    240c:	cf 91       	pop	r28
    240e:	df 91       	pop	r29
    2410:	08 95       	ret

00002412 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2412:	df 93       	push	r29
    2414:	cf 93       	push	r28
    2416:	cd b7       	in	r28, 0x3d	; 61
    2418:	de b7       	in	r29, 0x3e	; 62
    241a:	62 97       	sbiw	r28, 0x12	; 18
    241c:	0f b6       	in	r0, 0x3f	; 63
    241e:	f8 94       	cli
    2420:	de bf       	out	0x3e, r29	; 62
    2422:	0f be       	out	0x3f, r0	; 63
    2424:	cd bf       	out	0x3d, r28	; 61
    2426:	9a 8b       	std	Y+18, r25	; 0x12
    2428:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    242a:	89 89       	ldd	r24, Y+17	; 0x11
    242c:	9a 89       	ldd	r25, Y+18	; 0x12
    242e:	9e 01       	movw	r18, r28
    2430:	2f 5f       	subi	r18, 0xFF	; 255
    2432:	3f 4f       	sbci	r19, 0xFF	; 255
    2434:	b9 01       	movw	r22, r18
    2436:	4a e0       	ldi	r20, 0x0A	; 10
    2438:	50 e0       	ldi	r21, 0x00	; 0
    243a:	0e 94 98 12 	call	0x2530	; 0x2530 <itoa>
   LCD_displayString(buff); /* Display the string */
    243e:	ce 01       	movw	r24, r28
    2440:	01 96       	adiw	r24, 0x01	; 1
    2442:	0e 94 85 11 	call	0x230a	; 0x230a <LCD_displayString>
}
    2446:	62 96       	adiw	r28, 0x12	; 18
    2448:	0f b6       	in	r0, 0x3f	; 63
    244a:	f8 94       	cli
    244c:	de bf       	out	0x3e, r29	; 62
    244e:	0f be       	out	0x3f, r0	; 63
    2450:	cd bf       	out	0x3d, r28	; 61
    2452:	cf 91       	pop	r28
    2454:	df 91       	pop	r29
    2456:	08 95       	ret

00002458 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2458:	df 93       	push	r29
    245a:	cf 93       	push	r28
    245c:	cd b7       	in	r28, 0x3d	; 61
    245e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2460:	81 e0       	ldi	r24, 0x01	; 1
    2462:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <LCD_sendCommand>
}
    2466:	cf 91       	pop	r28
    2468:	df 91       	pop	r29
    246a:	08 95       	ret

0000246c <__mulsi3>:
    246c:	62 9f       	mul	r22, r18
    246e:	d0 01       	movw	r26, r0
    2470:	73 9f       	mul	r23, r19
    2472:	f0 01       	movw	r30, r0
    2474:	82 9f       	mul	r24, r18
    2476:	e0 0d       	add	r30, r0
    2478:	f1 1d       	adc	r31, r1
    247a:	64 9f       	mul	r22, r20
    247c:	e0 0d       	add	r30, r0
    247e:	f1 1d       	adc	r31, r1
    2480:	92 9f       	mul	r25, r18
    2482:	f0 0d       	add	r31, r0
    2484:	83 9f       	mul	r24, r19
    2486:	f0 0d       	add	r31, r0
    2488:	74 9f       	mul	r23, r20
    248a:	f0 0d       	add	r31, r0
    248c:	65 9f       	mul	r22, r21
    248e:	f0 0d       	add	r31, r0
    2490:	99 27       	eor	r25, r25
    2492:	72 9f       	mul	r23, r18
    2494:	b0 0d       	add	r27, r0
    2496:	e1 1d       	adc	r30, r1
    2498:	f9 1f       	adc	r31, r25
    249a:	63 9f       	mul	r22, r19
    249c:	b0 0d       	add	r27, r0
    249e:	e1 1d       	adc	r30, r1
    24a0:	f9 1f       	adc	r31, r25
    24a2:	bd 01       	movw	r22, r26
    24a4:	cf 01       	movw	r24, r30
    24a6:	11 24       	eor	r1, r1
    24a8:	08 95       	ret

000024aa <__udivmodqi4>:
    24aa:	99 1b       	sub	r25, r25
    24ac:	79 e0       	ldi	r23, 0x09	; 9
    24ae:	04 c0       	rjmp	.+8      	; 0x24b8 <__udivmodqi4_ep>

000024b0 <__udivmodqi4_loop>:
    24b0:	99 1f       	adc	r25, r25
    24b2:	96 17       	cp	r25, r22
    24b4:	08 f0       	brcs	.+2      	; 0x24b8 <__udivmodqi4_ep>
    24b6:	96 1b       	sub	r25, r22

000024b8 <__udivmodqi4_ep>:
    24b8:	88 1f       	adc	r24, r24
    24ba:	7a 95       	dec	r23
    24bc:	c9 f7       	brne	.-14     	; 0x24b0 <__udivmodqi4_loop>
    24be:	80 95       	com	r24
    24c0:	08 95       	ret

000024c2 <__prologue_saves__>:
    24c2:	2f 92       	push	r2
    24c4:	3f 92       	push	r3
    24c6:	4f 92       	push	r4
    24c8:	5f 92       	push	r5
    24ca:	6f 92       	push	r6
    24cc:	7f 92       	push	r7
    24ce:	8f 92       	push	r8
    24d0:	9f 92       	push	r9
    24d2:	af 92       	push	r10
    24d4:	bf 92       	push	r11
    24d6:	cf 92       	push	r12
    24d8:	df 92       	push	r13
    24da:	ef 92       	push	r14
    24dc:	ff 92       	push	r15
    24de:	0f 93       	push	r16
    24e0:	1f 93       	push	r17
    24e2:	cf 93       	push	r28
    24e4:	df 93       	push	r29
    24e6:	cd b7       	in	r28, 0x3d	; 61
    24e8:	de b7       	in	r29, 0x3e	; 62
    24ea:	ca 1b       	sub	r28, r26
    24ec:	db 0b       	sbc	r29, r27
    24ee:	0f b6       	in	r0, 0x3f	; 63
    24f0:	f8 94       	cli
    24f2:	de bf       	out	0x3e, r29	; 62
    24f4:	0f be       	out	0x3f, r0	; 63
    24f6:	cd bf       	out	0x3d, r28	; 61
    24f8:	09 94       	ijmp

000024fa <__epilogue_restores__>:
    24fa:	2a 88       	ldd	r2, Y+18	; 0x12
    24fc:	39 88       	ldd	r3, Y+17	; 0x11
    24fe:	48 88       	ldd	r4, Y+16	; 0x10
    2500:	5f 84       	ldd	r5, Y+15	; 0x0f
    2502:	6e 84       	ldd	r6, Y+14	; 0x0e
    2504:	7d 84       	ldd	r7, Y+13	; 0x0d
    2506:	8c 84       	ldd	r8, Y+12	; 0x0c
    2508:	9b 84       	ldd	r9, Y+11	; 0x0b
    250a:	aa 84       	ldd	r10, Y+10	; 0x0a
    250c:	b9 84       	ldd	r11, Y+9	; 0x09
    250e:	c8 84       	ldd	r12, Y+8	; 0x08
    2510:	df 80       	ldd	r13, Y+7	; 0x07
    2512:	ee 80       	ldd	r14, Y+6	; 0x06
    2514:	fd 80       	ldd	r15, Y+5	; 0x05
    2516:	0c 81       	ldd	r16, Y+4	; 0x04
    2518:	1b 81       	ldd	r17, Y+3	; 0x03
    251a:	aa 81       	ldd	r26, Y+2	; 0x02
    251c:	b9 81       	ldd	r27, Y+1	; 0x01
    251e:	ce 0f       	add	r28, r30
    2520:	d1 1d       	adc	r29, r1
    2522:	0f b6       	in	r0, 0x3f	; 63
    2524:	f8 94       	cli
    2526:	de bf       	out	0x3e, r29	; 62
    2528:	0f be       	out	0x3f, r0	; 63
    252a:	cd bf       	out	0x3d, r28	; 61
    252c:	ed 01       	movw	r28, r26
    252e:	08 95       	ret

00002530 <itoa>:
    2530:	fb 01       	movw	r30, r22
    2532:	9f 01       	movw	r18, r30
    2534:	e8 94       	clt
    2536:	42 30       	cpi	r20, 0x02	; 2
    2538:	c4 f0       	brlt	.+48     	; 0x256a <itoa+0x3a>
    253a:	45 32       	cpi	r20, 0x25	; 37
    253c:	b4 f4       	brge	.+44     	; 0x256a <itoa+0x3a>
    253e:	4a 30       	cpi	r20, 0x0A	; 10
    2540:	29 f4       	brne	.+10     	; 0x254c <itoa+0x1c>
    2542:	97 fb       	bst	r25, 7
    2544:	1e f4       	brtc	.+6      	; 0x254c <itoa+0x1c>
    2546:	90 95       	com	r25
    2548:	81 95       	neg	r24
    254a:	9f 4f       	sbci	r25, 0xFF	; 255
    254c:	64 2f       	mov	r22, r20
    254e:	77 27       	eor	r23, r23
    2550:	0e 94 c9 12 	call	0x2592	; 0x2592 <__udivmodhi4>
    2554:	80 5d       	subi	r24, 0xD0	; 208
    2556:	8a 33       	cpi	r24, 0x3A	; 58
    2558:	0c f0       	brlt	.+2      	; 0x255c <itoa+0x2c>
    255a:	89 5d       	subi	r24, 0xD9	; 217
    255c:	81 93       	st	Z+, r24
    255e:	cb 01       	movw	r24, r22
    2560:	00 97       	sbiw	r24, 0x00	; 0
    2562:	a1 f7       	brne	.-24     	; 0x254c <itoa+0x1c>
    2564:	16 f4       	brtc	.+4      	; 0x256a <itoa+0x3a>
    2566:	5d e2       	ldi	r21, 0x2D	; 45
    2568:	51 93       	st	Z+, r21
    256a:	10 82       	st	Z, r1
    256c:	c9 01       	movw	r24, r18
    256e:	0c 94 b9 12 	jmp	0x2572	; 0x2572 <strrev>

00002572 <strrev>:
    2572:	dc 01       	movw	r26, r24
    2574:	fc 01       	movw	r30, r24
    2576:	67 2f       	mov	r22, r23
    2578:	71 91       	ld	r23, Z+
    257a:	77 23       	and	r23, r23
    257c:	e1 f7       	brne	.-8      	; 0x2576 <strrev+0x4>
    257e:	32 97       	sbiw	r30, 0x02	; 2
    2580:	04 c0       	rjmp	.+8      	; 0x258a <strrev+0x18>
    2582:	7c 91       	ld	r23, X
    2584:	6d 93       	st	X+, r22
    2586:	70 83       	st	Z, r23
    2588:	62 91       	ld	r22, -Z
    258a:	ae 17       	cp	r26, r30
    258c:	bf 07       	cpc	r27, r31
    258e:	c8 f3       	brcs	.-14     	; 0x2582 <strrev+0x10>
    2590:	08 95       	ret

00002592 <__udivmodhi4>:
    2592:	aa 1b       	sub	r26, r26
    2594:	bb 1b       	sub	r27, r27
    2596:	51 e1       	ldi	r21, 0x11	; 17
    2598:	07 c0       	rjmp	.+14     	; 0x25a8 <__udivmodhi4_ep>

0000259a <__udivmodhi4_loop>:
    259a:	aa 1f       	adc	r26, r26
    259c:	bb 1f       	adc	r27, r27
    259e:	a6 17       	cp	r26, r22
    25a0:	b7 07       	cpc	r27, r23
    25a2:	10 f0       	brcs	.+4      	; 0x25a8 <__udivmodhi4_ep>
    25a4:	a6 1b       	sub	r26, r22
    25a6:	b7 0b       	sbc	r27, r23

000025a8 <__udivmodhi4_ep>:
    25a8:	88 1f       	adc	r24, r24
    25aa:	99 1f       	adc	r25, r25
    25ac:	5a 95       	dec	r21
    25ae:	a9 f7       	brne	.-22     	; 0x259a <__udivmodhi4_loop>
    25b0:	80 95       	com	r24
    25b2:	90 95       	com	r25
    25b4:	bc 01       	movw	r22, r24
    25b6:	cd 01       	movw	r24, r26
    25b8:	08 95       	ret

000025ba <_exit>:
    25ba:	f8 94       	cli

000025bc <__stop_program>:
    25bc:	ff cf       	rjmp	.-2      	; 0x25bc <__stop_program>
